CREATE TABLE ACC_ELDOCS (
    DT_ACC TIMESTAMP,
    DOC_ID INTEGER,
    R_KOD VARCHAR(50)
);
CREATE UNIQUE INDEX ACC_ELDOCS_DT_ACC ON ACC_ELDOCS (DT_ACC);
CREATE UNIQUE INDEX ACC_ELDOCS_DOC_ID ON ACC_ELDOCS (DOC_ID);
CREATE UNIQUE INDEX ACC_ELDOCS_R_KOD ON ACC_ELDOCS (R_KOD);
CREATE TABLE ACQUISITION_TYPES (
    KOD INTEGER NOT NULL,
    NAME VARCHAR(80)
);
CREATE TABLE ANNOT_WORD_INDEX (
    DOC_ID INTEGER,
    WORD VARCHAR(50),
    FOREIGN KEY (DOC_ID) REFERENCES DOCUMENT (DOC_ID) ON DELETE CASCADE
);
CREATE UNIQUE INDEX ANNOT_WORD_IDX2 ON ANNOT_WORD_INDEX (WORD, DOC_ID);
CREATE TABLE AUTHORITYLIST (
    CODE INTEGER NOT NULL,
    NAME VARCHAR(250),
    TABLELIST VARCHAR(250),
    TABLELIST2 VARCHAR(250),
    AUTHLIST VARCHAR(250),
    NORDER INTEGER
);
CREATE TABLE AUTHOR_LIST (
    KOD SMALLINT NOT NULL,
    NAME VARCHAR(80)
);
CREATE TABLE AUTHOR_MARK_LIST (
    KOD SMALLINT NOT NULL,
    NAME VARCHAR(20),
    MARK_ORDER INTEGER
);
CREATE UNIQUE INDEX AUTHOR_MARK_KOD ON AUTHOR_MARK_LIST (KOD);
CREATE UNIQUE INDEX AUTHOR_MARK_IDX ON AUTHOR_MARK_LIST (NAME);
CREATE TABLE AUTHOR_SYNONYM (
    ID INTEGER NOT NULL,
    AUTHOR VARCHAR(50) NOT NULL,
    NORDER SMALLINT NOT NULL
);
CREATE UNIQUE INDEX AUTHOR_SYN_IDX2 ON AUTHOR_SYNONYM (ID, AUTHOR);
CREATE UNIQUE INDEX AUTHOR_SYN_IDX ON AUTHOR_SYNONYM (AUTHOR);
CREATE TABLE AUTHOR_WORD_INDEX (
    DOC_ID INTEGER NOT NULL,
    AUTHOR VARCHAR(50),
    FOREIGN KEY (DOC_ID) REFERENCES DOCUMENT (DOC_ID) ON DELETE CASCADE
);
CREATE UNIQUE INDEX AUTHOR_FLD_IDX ON AUTHOR_WORD_INDEX (AUTHOR, DOC_ID);
CREATE TABLE AUTH_TYPE_MAIN (
    KOD INTEGER,
    CODE VARCHAR(1),
    STAT VARCHAR(1),
    NAME VARCHAR(15)
);
CREATE TABLE BLOCKREASON_LIST (
    KOD SMALLINT NOT NULL,
    NAME VARCHAR(200)
);
CREATE TABLE CARDS (
    CARD_ID INTEGER NOT NULL,
    HIER_ID INTEGER,
    STYPE VARCHAR(1),
    DT_CREAT TIMESTAMP,
    DOC_COUNT SMALLINT,
    NAME VARCHAR(230),
    TOPIC_TYPE VARCHAR(250),
    SIGN VARCHAR(250),
    FIRST_PART_NAME VARCHAR(250),
    NEXT_PART_NAME VARCHAR(250),
    FULL_INITIALS VARCHAR(250),
    ADD_PART_NAME VARCHAR(250),
    OTHER_PART_NAME VARCHAR(250),
    TOPIC_DATES VARCHAR(250),
    PLACE VARCHAR(250),
    AFFILATION VARCHAR(250),
    TOPIC VARCHAR(250),
    GEOGRAPHICAL VARCHAR(250),
    CHRONOLOGICAL VARCHAR(250),
    TOPIC_FORMAT VARCHAR(250),
    TOPIC_COMMENT VARCHAR(250)
);
CREATE UNIQUE INDEX CARD_UNI ON CARDS (CARD_ID);
CREATE UNIQUE INDEX CARD_NAME_IDX ON CARDS (NAME);
CREATE TABLE CITY_LIST (
    KOD SMALLINT NOT NULL,
    NAME VARCHAR(80),
    FULLNAME VARCHAR(80)
);
CREATE UNIQUE INDEX CITY_IDX ON CITY_LIST (KOD);
CREATE TABLE CLIENT_FILES (
    FILENAME VARCHAR(100) NOT NULL,
    FILEBIN BLOB SUB_TYPE 0 NOT NULL
);
CREATE TABLE CODE_PARSING_LIST (
    KOD SMALLINT NOT NULL,
    NAME VARCHAR(48),
    SEPARATOR VARCHAR(5)
);
CREATE TABLE CODE_PARSING_RULES (
    PARSING_KOD SMALLINT,
    NORDER SMALLINT,
    MASTER_CARD INTEGER,
    BEG_SEPARATOR VARCHAR(5),
    END_SEPARATOR VARCHAR(5)
);
CREATE TABLE COLPROFILES (
    PROFILE_KOD INTEGER NOT NULL,
    WIN_KOD SMALLINT NOT NULL,
    COL_KOD INTEGER NOT NULL,
    COL_W DECIMAL(10, 3),
    COL_POS SMALLINT,
    COL_HIDDEN SMALLINT
);
CREATE UNIQUE INDEX COLPROF_UNI ON COLPROFILES (PROFILE_KOD, WIN_KOD, COL_KOD);
CREATE UNIQUE INDEX COLPROF_IDX ON COLPROFILES (PROFILE_KOD, WIN_KOD);
CREATE UNIQUE INDEX COLPROF_WIN_IDX ON COLPROFILES (WIN_KOD);
CREATE TABLE DEVICES (
    KOD SMALLINT NOT NULL,
    NAME VARCHAR(32),
    PATH VARCHAR(80),
    SAVE_STYLE SMALLINT
);
CREATE TABLE DICTION_LIST (
    KOD SMALLINT NOT NULL,
    NAME VARCHAR(48),
    NTYPE SMALLINT,
    STATUS SMALLINT
);
CREATE UNIQUE INDEX DICTION_LIST_IDX ON DICTION_LIST (KOD);
CREATE TABLE DICTION_WORD (
    DIC_KOD SMALLINT NOT NULL,
    KOD INTEGER NOT NULL,
    WORD VARCHAR(20)
);
CREATE UNIQUE INDEX DICTION_IDX ON DICTION_WORD (DIC_KOD, WORD);
CREATE UNIQUE INDEX DICTION_UNI ON DICTION_WORD (KOD);
CREATE TABLE DISCIPLINE (
    ID INTEGER NOT NULL,
    CIPHER VARCHAR(20),
    NAME VARCHAR(200),
    SUBNAME VARCHAR(100),
    SCOMMENT VARCHAR(250)
);
CREATE UNIQUE INDEX DSCP_ID ON DISCIPLINE (ID);
CREATE UNIQUE INDEX DSCP_NAME ON DISCIPLINE (NAME);
CREATE TABLE DIVISION_LIST (
    KOD SMALLINT NOT NULL,
    NAME VARCHAR(250)
);
CREATE UNIQUE INDEX DIVISION_IDX ON DIVISION_LIST (KOD);
CREATE TABLE DJANGO_MIGRATIONS (
    ID INTEGER NOT NULL,
    APP VARCHAR(255) NOT NULL,
    NAME VARCHAR(255) NOT NULL,
    APPLIED TIMESTAMP NOT NULL,
    PRIMARY KEY (ID)
);
CREATE TABLE DOCNAME_LIST (
    KOD SMALLINT NOT NULL,
    NAME VARCHAR(200)
);
CREATE TABLE DOCTYPE (
    CODE SMALLINT NOT NULL,
    NAME VARCHAR(250),
    NORDER SMALLINT NOT NULL,
    MARCCODE VARCHAR(3),
    NLEVEL INTEGER,
    BIBTYPE INTEGER,
    DEFAULT_CHILD_LINK INTEGER,
    DEFAULT_CHILD_TYPE INTEGER
);
CREATE TABLE DOCTYPE_FIELD (
    DOCTYPE_KOD SMALLINT NOT NULL,
    COL_KOD SMALLINT NOT NULL
);
CREATE TABLE DOCUMENT (
    DOC_TYPE SMALLINT NOT NULL,
    NAME VARCHAR(250),
    DEVICE_KOD SMALLINT,
    TYPE_KOD SMALLINT,
    PUBLISHER VARCHAR(100),
    REG_DATE TIMESTAMP,
    PUBL_PLACE VARCHAR(80),
    IN_DATE TIMESTAMP NOT NULL,
    LONG_FILENAME VARCHAR(250),
    ATTR SMALLINT,
    DOC_ID INTEGER NOT NULL,
    FILENAME VARCHAR(245),
    AUTHOR VARCHAR(250),
    IN_USER VARCHAR(50) NOT NULL,
    LAST_EDIT_DATE TIMESTAMP NOT NULL,
    LAST_EDIT_USER VARCHAR(50) NOT NULL,
    ITEM_QTY SMALLINT NOT NULL,
    ITEM_PRESENT SMALLINT NOT NULL,
    UDK VARCHAR(200),
    ISBN VARCHAR(64),
    BBK VARCHAR(200),
    AUTHOR_MARK VARCHAR(20),
    ISSN VARCHAR(32),
    LANG VARCHAR(32),
    LANG_KOD SMALLINT,
    CIPHER VARCHAR(32),
    STATUS VARCHAR(1),
    SIZEM VARCHAR(50),
    ANNOT1 VARCHAR(254),
    ANNOT2 VARCHAR(254),
    ANNOT3 VARCHAR(254),
    ANNOT4 VARCHAR(254),
    CDLABEL VARCHAR(32),
    TEXT_FILE BLOB SUB_TYPE 0,
    GROUP_KOD INTEGER NOT NULL,
    PARENT_ID INTEGER,
    IS_PARENT SMALLINT,
    AUTHOR_TYPE SMALLINT,
    NAME_PREFIX VARCHAR(20),
    PUBL_YEAR VARCHAR(50),
    PARENT_TYPE INTEGER,
    FORMAT_NUM VARCHAR(32),
    DEL_R_USER VARCHAR(50),
    DEL_R_DATE DATE,
    DEL_D_USER VARCHAR(50),
    DEL_D_DATE DATE,
    PRIMARY KEY (DOC_ID)
);
CREATE UNIQUE INDEX DOC_TYPE ON DOCUMENT (DOC_TYPE);
CREATE UNIQUE INDEX PUBL_PLACE_IDX ON DOCUMENT (PUBL_PLACE);
CREATE UNIQUE INDEX DOCUM_INDATE ON DOCUMENT (IN_DATE);
CREATE UNIQUE INDEX DOCUM_DOCID_STATUS ON DOCUMENT (DOC_ID, STATUS);
CREATE UNIQUE INDEX FILENAME_IDX ON DOCUMENT (FILENAME);
CREATE UNIQUE INDEX DOCUM_INUSER ON DOCUMENT (IN_USER);
CREATE UNIQUE INDEX DOCUM_EDITDATE ON DOCUMENT (LAST_EDIT_DATE);
CREATE UNIQUE INDEX UDK_IDX ON DOCUMENT (UDK);
CREATE UNIQUE INDEX LANG_KOD_IDX ON DOCUMENT (LANG_KOD);
CREATE UNIQUE INDEX DOC_GROUP_KOD ON DOCUMENT (GROUP_KOD);
CREATE UNIQUE INDEX DOCUM_PARENT ON DOCUMENT (PARENT_ID);
CREATE UNIQUE INDEX DOC_PRIMARY_IDX ON DOCUMENT (NAME_PREFIX, PUBLISHER);
CREATE UNIQUE INDEX DOC_NAME_PREF_IDX ON DOCUMENT (NAME_PREFIX);
CREATE UNIQUE INDEX PUBL_YEAR_IDX ON DOCUMENT (PUBL_YEAR);
CREATE TABLE DOCXFIELD_LIST (
    KOD SMALLINT NOT NULL,
    NAME VARCHAR(250) NOT NULL,
    STYPE VARCHAR(10) NOT NULL,
    NLENGTH SMALLINT,
    SCALE SMALLINT,
    SUPERFIELD SMALLINT,
    USEINQUERY SMALLINT,
    USEINSORT SMALLINT,
    USEINLIST SMALLINT,
    NORDER SMALLINT,
    MARCTAG VARCHAR(3),
    MARC_SUBFIELD VARCHAR(1),
    MARCPOS_START SMALLINT,
    MARCPOS_END SMALLINT,
    MARC_MULTIPLE VARCHAR(1),
    MARC_CODETBL VARCHAR(18),
    ALLOWTEXTEDIT SMALLINT,
    MARC_INDICATORS VARCHAR(2),
    MARC_ADDFIELD VARCHAR(80),
    SHORT_NAME VARCHAR(100),
    SEPARATOR VARCHAR(5),
    AREA SMALLINT,
    NNO SMALLINT,
    END_SEPARATOR VARCHAR(5),
    UNIMARCTAG VARCHAR(3),
    UNIMARC_SUBFIELD VARCHAR(1),
    UNIMARCPOS_START SMALLINT,
    UNIMARCPOS_END SMALLINT,
    UNIMARC_INDICATORS VARCHAR(2),
    UNIMARC_ADDFIELD VARCHAR(80),
    UNIMARC_MULTIPLE VARCHAR(1),
    UNIMARC_CODETBL VARCHAR(18),
    UNIALLOWTEXTEDIT SMALLINT,
    AUTHOR_LEVEL SMALLINT,
    COLNAME VARCHAR(18)
);
CREATE TABLE DOCXFIELD_VALUE (
    DOC_ID INTEGER NOT NULL,
    COL002 VARCHAR(100),
    COL003 VARCHAR(50),
    COL004 VARCHAR(20),
    COL006 VARCHAR(32),
    COL007 VARCHAR(32),
    COL008 VARCHAR(64),
    COL010 VARCHAR(80),
    COL011 VARCHAR(32),
    COL012 VARCHAR(80),
    COL013 VARCHAR(32),
    COL014 VARCHAR(128),
    COL016 VARCHAR(250),
    COL017 VARCHAR(200),
    COL018 VARCHAR(20),
    COL019 VARCHAR(200),
    COL020 VARCHAR(20),
    COL021 VARCHAR(200),
    COL022 DATE,
    COL023 DATE,
    COL024 VARCHAR(250),
    COL025 VARCHAR(250),
    COL026 VARCHAR(64),
    COL027 VARCHAR(64),
    COL028 VARCHAR(50),
    COL029 VARCHAR(250),
    COL030 VARCHAR(250),
    COL031 VARCHAR(64),
    COL033 VARCHAR(32),
    COL035 INTEGER,
    COL036 INTEGER,
    COL037 VARCHAR(50),
    COL038 VARCHAR(250),
    COL039 VARCHAR(100),
    COL040 VARCHAR(100),
    COL041 INTEGER,
    COL043 VARCHAR(50),
    COL044 VARCHAR(250),
    COL045 VARCHAR(3),
    COL046 VARCHAR(50),
    COL047 VARCHAR(50),
    COL048 VARCHAR(150),
    COL049 VARCHAR(25),
    COL051 VARCHAR(200),
    COL052 VARCHAR(20),
    COL054 VARCHAR(20),
    COL055 VARCHAR(20),
    COL056 VARCHAR(20),
    COL057 VARCHAR(100),
    COL059 VARCHAR(10),
    COL060 VARCHAR(10),
    COL061 VARCHAR(10),
    COL062 VARCHAR(50),
    COL064 VARCHAR(200),
    COL065 VARCHAR(40),
    COL067 VARCHAR(40),
    COL068 VARCHAR(20),
    COL069 VARCHAR(100),
    COL070 VARCHAR(100),
    COL072 VARCHAR(200),
    COL073 VARCHAR(200),
    COL074 VARCHAR(200),
    COL075 VARCHAR(200),
    COL077 VARCHAR(10),
    COL078 VARCHAR(3),
    COL079 VARCHAR(1),
    COL080 VARCHAR(10),
    COL081 VARCHAR(40),
    COL082 VARCHAR(100),
    COL083 VARCHAR(20),
    COL084 VARCHAR(70),
    COL086 VARCHAR(200),
    COL087 VARCHAR(250),
    COL088 VARCHAR(250),
    COL089 VARCHAR(25),
    COL090 VARCHAR(200),
    COL091 VARCHAR(250),
    COL092 VARCHAR(250),
    COL093 VARCHAR(25),
    COL094 VARCHAR(250),
    COL095 VARCHAR(30),
    COL097 VARCHAR(3),
    COL098 VARCHAR(200),
    COL099 VARCHAR(250),
    COL101 VARCHAR(1),
    COL102 VARCHAR(1),
    COL103 VARCHAR(1),
    COL104 VARCHAR(1),
    FOREIGN KEY (DOC_ID) REFERENCES DOCUMENT (DOC_ID) ON DELETE CASCADE
);
CREATE UNIQUE INDEX COL016_IDX ON DOCXFIELD_VALUE (COL016);
CREATE UNIQUE INDEX COL017_IDX ON DOCXFIELD_VALUE (COL017);
CREATE UNIQUE INDEX COL018_IDX ON DOCXFIELD_VALUE (COL018);
CREATE UNIQUE INDEX COL019_IDX ON DOCXFIELD_VALUE (COL019);
CREATE UNIQUE INDEX COL024_IDX ON DOCXFIELD_VALUE (COL024);
CREATE TABLE DOC_AGENT_INDEX (
    DOC_ID INTEGER,
    RECORD_HEADER VARCHAR(200)
);
CREATE UNIQUE INDEX DA_ID_IDX ON DOC_AGENT_INDEX (DOC_ID);
CREATE UNIQUE INDEX DA_HEADER_IDX ON DOC_AGENT_INDEX (RECORD_HEADER);
CREATE TABLE DOC_ANNOTATION (
    DOC_ID INTEGER,
    NORDER SMALLINT,
    FRAGMENT VARCHAR(251)
);
CREATE UNIQUE INDEX DOC_ANNON_IDX ON DOC_ANNOTATION (DOC_ID, NORDER);
CREATE TABLE DOC_DSCP (
    DOC_ID INTEGER,
    DSCP_ID INTEGER
);
CREATE UNIQUE INDEX DOC_DSCP_DOC_ID ON DOC_DSCP (DOC_ID);
CREATE UNIQUE INDEX DOC_DSCP_DSCP_ID ON DOC_DSCP (DSCP_ID);
CREATE TABLE DOC_ITEM (
    DOC_ID INTEGER NOT NULL,
    ITEM_ID INTEGER NOT NULL,
    ITEM_NO VARCHAR(32),
    REG_DATE TIMESTAMP,
    COMMENTT VARCHAR(128),
    STATUS VARCHAR(1),
    DELIVERED SMALLINT,
    DEVICE_KOD SMALLINT,
    PARTY_KOD INTEGER,
    PARTY_NO VARCHAR(15),
    ACT_KOD INTEGER,
    ACT_NO VARCHAR(10),
    OUT_REASON SMALLINT,
    QTYALL SMALLINT,
    QTYACT SMALLINT,
    PRICE DECIMAL(10, 2),
    PRICE_UNIT SMALLINT,
    STOCK_KOD SMALLINT,
    NOBALANCE SMALLINT,
    ITEM_NUMBER VARCHAR(20),
    ITEM_INTNO INTEGER,
    ITEM_MAINNO VARCHAR(32),
    DEVICE_DATE TIMESTAMP,
    DEVICE_USER VARCHAR(30),
    DEVICE_PREV INTEGER,
    LAST_EDIT_DATE TIMESTAMP,
    LAST_EDIT_USER VARCHAR(30),
    DISTRIBUTION_KOD SMALLINT,
    RFID VARCHAR(32),
    BARCODE VARCHAR(32),
    FOREIGN KEY (DOC_ID) REFERENCES DOCUMENT (DOC_ID) ON DELETE CASCADE
);
CREATE UNIQUE INDEX DOC_ITEM_IND ON DOC_ITEM (DOC_ID, ITEM_ID);
CREATE UNIQUE INDEX DOC_ITEM_UNI ON DOC_ITEM (ITEM_ID);
CREATE UNIQUE INDEX ITEM_NO ON DOC_ITEM (ITEM_NO);
CREATE UNIQUE INDEX DOC_ITEM_PARTYKOD ON DOC_ITEM (PARTY_KOD);
CREATE UNIQUE INDEX DOCITEM_INTNO ON DOC_ITEM (ITEM_INTNO);
CREATE UNIQUE INDEX ITEM_RFID_IDX ON DOC_ITEM (RFID);
CREATE UNIQUE INDEX ITEM_BARCODE_IDX ON DOC_ITEM (BARCODE);
CREATE TABLE DOC_LONGFIELD (
    ID INTEGER NOT NULL,
    FLD_TYPE SMALLINT NOT NULL,
    NORDER INTEGER NOT NULL,
    FRAGMENT01 VARCHAR(250),
    FRAGMENT02 VARCHAR(250),
    FRAGMENT03 VARCHAR(250),
    FRAGMENT04 VARCHAR(250),
    FRAGMENT05 VARCHAR(250),
    FRAGMENT06 VARCHAR(250),
    FRAGMENT07 VARCHAR(250),
    FRAGMENT08 VARCHAR(250)
);
CREATE UNIQUE INDEX DOC_LONGFIELD_IDX ON DOC_LONGFIELD (ID, FLD_TYPE, NORDER);
CREATE TABLE DOC_NUMERATION (
    DOC_ID INTEGER NOT NULL,
    NUMERATION BLOB SUB_TYPE 0
);
CREATE UNIQUE INDEX DOC_NUM_IDX ON DOC_NUMERATION (DOC_ID);
CREATE TABLE DOC_OTHERFIELD (
    DOC_ID INTEGER NOT NULL,
    FIELDS BLOB SUB_TYPE 0,
    FOREIGN KEY (DOC_ID) REFERENCES DOCUMENT (DOC_ID) ON DELETE CASCADE
);
CREATE TABLE DOC_OTHERFIELD_LST (
    KOD SMALLINT NOT NULL,
    NAME VARCHAR(64),
    USMARC_TAG VARCHAR(10),
    UNIMARC_TAG VARCHAR(10),
    COMMENTT VARCHAR(100),
    USMARC_IND CHAR(2),
    UNIMARC_IND CHAR(2)
);
CREATE TABLE DOC_PRESENCE (
    DOC_ID INTEGER NOT NULL,
    DOC_OWNER VARCHAR(32) NOT NULL,
    SCOMMENT VARCHAR(250),
    ACTUAL_DATE TIMESTAMP,
    NUMERATION BLOB SUB_TYPE 0,
    ITEM_QTY INTEGER,
    STOCK_ITEM_QTY INTEGER,
    PRICE DECIMAL(10, 2)
);
CREATE UNIQUE INDEX PRESENCE_UNI ON DOC_PRESENCE (DOC_ID);
CREATE TABLE DOC_PRESENCE_NUM (
    DOC_ID INTEGER NOT NULL,
    DOC_OWNER VARCHAR(32) NOT NULL,
    NORDER INTEGER NOT NULL,
    FRAGMENT01 VARCHAR(250),
    FRAGMENT02 VARCHAR(250),
    FRAGMENT03 VARCHAR(250),
    FRAGMENT04 VARCHAR(250),
    FRAGMENT05 VARCHAR(250),
    FRAGMENT06 VARCHAR(250),
    FRAGMENT07 VARCHAR(250),
    FRAGMENT08 VARCHAR(250)
);
CREATE UNIQUE INDEX PRESENCE_NUM_IDX ON DOC_PRESENCE_NUM (DOC_ID, DOC_OWNER, NORDER);
CREATE TABLE DOC_REQUEST (
    ID INTEGER NOT NULL,
    DOC_ID INTEGER,
    DATE_REQ TIMESTAMP,
    ORDER_NAME VARCHAR(64),
    QTY SMALLINT,
    PRIORITY_NO SMALLINT,
    REQ_STATUS SMALLINT,
    COMMENTT VARCHAR(100),
    DIVISION_KOD SMALLINT,
    SUBDIVISION_KOD SMALLINT,
    SPECIALITY_KOD SMALLINT,
    ACCEPTED INTEGER,
    DEVICE_KOD INTEGER,
    DSCP_ID INTEGER,
    FOREIGN KEY (DOC_ID) REFERENCES DOCUMENT (DOC_ID) ON DELETE CASCADE
);
CREATE TABLE DSCP_TOPIC (
    DSCP_ID INTEGER NOT NULL,
    TOPIC_TYPE VARCHAR(3),
    TOPIC_VALUE VARCHAR(20)
);
CREATE UNIQUE INDEX DSCP_TOPIC_ID ON DSCP_TOPIC (DSCP_ID);
CREATE TABLE EXTQUERY_BODY (
    ID INTEGER NOT NULL,
    FLD_TYPE SMALLINT NOT NULL,
    NORDER INTEGER NOT NULL,
    FRAGMENT01 VARCHAR(250),
    FRAGMENT02 VARCHAR(250),
    FRAGMENT03 VARCHAR(250),
    FRAGMENT04 VARCHAR(250),
    FRAGMENT05 VARCHAR(250),
    FRAGMENT06 VARCHAR(250),
    FRAGMENT07 VARCHAR(250),
    FRAGMENT08 VARCHAR(250)
);
CREATE UNIQUE INDEX EXTQUERY_BODY_IDX ON EXTQUERY_BODY (ID, FLD_TYPE, NORDER);
CREATE TABLE GENERAL_XML_TREE (
    TREE_ID VARCHAR(50),
    NODE_LEVEL SMALLINT,
    IS_ATTRIBUTE SMALLINT,
    NODE_NAME VARCHAR(250),
    NODE_VALUE VARCHAR(250),
    PART_NUMBER SMALLINT,
    SUFFIX_SIZE SMALLINT,
    NODE_ORDER SMALLINT
);
CREATE UNIQUE INDEX GEN_XML_TREE_IDX ON GENERAL_XML_TREE (TREE_ID);
CREATE TABLE GENPROFILES (
    SUSER_NAME VARCHAR(50),
    SECTION_NAME VARCHAR(40),
    ITEM_NAME VARCHAR(40),
    SVALUE VARCHAR(250)
);
CREATE UNIQUE INDEX GENPROF_UNI ON GENPROFILES (SUSER_NAME, SECTION_NAME, ITEM_NAME);
CREATE TABLE GROUPAUTHORITY (
    GROUPCODE INTEGER NOT NULL,
    AUTHCODE INTEGER NOT NULL
);
CREATE TABLE GROUPLIST (
    CODE INTEGER NOT NULL,
    NAME VARCHAR(250)
);
CREATE TABLE INDEXED_FIELD (
    KOD SMALLINT NOT NULL,
    NTYPE SMALLINT
);
CREATE TABLE INVENT_BOOK (
    KOD SMALLINT NOT NULL,
    NAME VARCHAR(32),
    ITEM_SORT_LIST VARCHAR(64),
    DOCTYPE_LIST VARCHAR(64),
    FLAGS INTEGER,
    NO_FROM INTEGER,
    NO_TO INTEGER,
    DATE_FROM TIMESTAMP,
    DATE_TO TIMESTAMP,
    NO_PREFIX VARCHAR(10),
    CUR_NO INTEGER,
    NO_LENGTH SMALLINT,
    NO_SUFFIX VARCHAR(10)
);
CREATE TABLE ITEM (
    ITEM_INTNO INTEGER NOT NULL,
    DOC_ID INTEGER NOT NULL,
    USER_NAME VARCHAR(50) NOT NULL,
    STATUS VARCHAR(1),
    INV_DATE TIMESTAMP NOT NULL,
    IP VARCHAR(25) NOT NULL,
    PRIMARY KEY (ITEM_INTNO)
);
CREATE TABLE ITEM_ADDITION (
    DOC_ID INTEGER NOT NULL,
    DEVICE_KOD INTEGER,
    ONCREATE_QTY INTEGER,
    ACCEPTED_QTY INTEGER,
    LAST_EDIT_DATE TIMESTAMP,
    LAST_EDIT_USER VARCHAR(50),
    PASS_QTY INTEGER
);
CREATE UNIQUE INDEX ITEM_ADDITION_IDX ON ITEM_ADDITION (DOC_ID);
CREATE TABLE ITEM_OUTREASON (
    ID INTEGER,
    ITEM_ID INTEGER,
    OUT_REASON SMALLINT,
    OUT_QTY SMALLINT,
    ACT_KOD INTEGER,
    ACT_NO VARCHAR(10),
    STATUS VARCHAR(1)
);
CREATE UNIQUE INDEX ITEM_OUT_UNI ON ITEM_OUTREASON (ID);
CREATE UNIQUE INDEX ITEM_OUT_ITEM ON ITEM_OUTREASON (ITEM_ID);
CREATE TABLE JURIDICAL_PERSON (
    ID INTEGER NOT NULL,
    PHONE1 VARCHAR(32),
    KOD INTEGER,
    NAME VARCHAR(254),
    PHONE2 VARCHAR(32),
    FAX VARCHAR(32),
    ADDRESS VARCHAR(64),
    CHIEF_NAME VARCHAR(32),
    CHIEF_POST VARCHAR(32),
    CODE VARCHAR(32),
    STATUS VARCHAR(1),
    IN_USER VARCHAR(50),
    EMAIL VARCHAR(80),
    SUPPLIER VARCHAR(1),
    IN_DATE TIMESTAMP,
    LAST_EDIT_DATE TIMESTAMP,
    LAST_EDIT_USER VARCHAR(50),
    ISPARTNER INTEGER,
    ISCOMPOSITE INTEGER,
    URL VARCHAR(200)
);
CREATE UNIQUE INDEX JUR_UNI ON JURIDICAL_PERSON (ID);
CREATE TABLE KAT_DOC (
    KOD SMALLINT NOT NULL,
    CODE VARCHAR(1),
    NAME VARCHAR(48),
    STAT VARCHAR(1)
);
CREATE TABLE KNOWLEDGE_T (
    KOD INTEGER,
    NAME VARCHAR(150),
    CODE VARCHAR(3),
    STAT VARCHAR(1)
);
CREATE TABLE LANGUAGES (
    KOD SMALLINT NOT NULL,
    NAME VARCHAR(32),
    CODE VARCHAR(3),
    STAT VARCHAR(1),
    USED SMALLINT
);
CREATE UNIQUE INDEX LANGUAGES_I ON LANGUAGES (CODE);
CREATE TABLE LICENCE (
    LICENCENO VARCHAR(50) NOT NULL,
    USERQTY SMALLINT NOT NULL,
    MAXDATE TIMESTAMP
);
CREATE TABLE LICENCE_INFO (
    LICENCE_TYPE VARCHAR(100),
    LICENCE_NO VARCHAR(200),
    USER_QTY INTEGER,
    MAX_DATE DATE
);
CREATE TABLE MARCSYS_COUNTRY (
    KOD SMALLINT NOT NULL,
    CODE VARCHAR(5),
    NAME VARCHAR(60),
    STAT VARCHAR(1),
    USED SMALLINT
);
CREATE UNIQUE INDEX MARCSYS_COUNTRY_I ON MARCSYS_COUNTRY (CODE);
CREATE TABLE MARCSYS_FORM (
    KOD SMALLINT NOT NULL,
    CODE VARCHAR(1),
    NAME VARCHAR(48),
    STAT VARCHAR(1),
    UNIMARC_CODE CHAR(1)
);
CREATE TABLE MARCSYS_RELATOR (
    CODE VARCHAR(3),
    NAME VARCHAR(32),
    STAT VARCHAR(1)
);
CREATE TABLE MARC_DOCDESC (
    CODE VARCHAR(1),
    NAME VARCHAR(32)
);
CREATE TABLE MARC_DOCLEVEL (
    CODE VARCHAR(1),
    NAME VARCHAR(32),
    UNIMARC_CODE CHAR(1)
);
CREATE TABLE MARC_DOCTYPE (
    CODE CHAR(1),
    NAME VARCHAR(48),
    UNIMARC_CODE CHAR(1)
);
CREATE TABLE MASS_ACTION (
    ACTION_ID INTEGER,
    NAME VARCHAR(250),
    ORGANISATION VARCHAR(250),
    DEPARTMENT VARCHAR(250),
    ACTION_DATE DATE,
    PLACE VARCHAR(250),
    QTY INTEGER,
    ACTION_RESULT VARCHAR(250),
    ACTION_COMMENT VARCHAR(250),
    IN_USER VARCHAR(50)
);
CREATE UNIQUE INDEX MASS_ACTION_IDX1 ON MASS_ACTION (ACTION_ID);
CREATE UNIQUE INDEX MASS_ACTION_IDX2 ON MASS_ACTION (ACTION_DATE);
CREATE TABLE MASTER_CARDS (
    MASTER_ID INTEGER,
    GROUP_KOD INTEGER,
    HIER_ID INTEGER,
    ACCESS_TYPE SMALLINT,
    HIER_TYPE SMALLINT
);
CREATE TABLE MAT_AUDIO (
    KOD SMALLINT NOT NULL,
    CODE VARCHAR(1),
    NAME VARCHAR(48),
    STAT VARCHAR(1)
);
CREATE TABLE MAT_EL_DOC (
    KOD SMALLINT NOT NULL,
    CODE VARCHAR(1),
    NAME VARCHAR(48),
    STAT VARCHAR(1)
);
CREATE TABLE MAT_VIDEO (
    KOD SMALLINT NOT NULL,
    CODE VARCHAR(1),
    NAME VARCHAR(48),
    STAT VARCHAR(1)
);
CREATE TABLE MAXES (
    JUR_PERSON_ID INTEGER,
    PHYS_PERSON_ID INTEGER,
    DOC_ID INTEGER,
    CARD_ID INTEGER,
    ITEM_ID INTEGER,
    COLCNT INTEGER,
    GRPCNT INTEGER,
    PARTY_KOD INTEGER,
    REQUEST_ID INTEGER,
    ORG_ORDER_ID INTEGER,
    ITEM_OUTREASON_ID INTEGER,
    DELIVER_ID INTEGER,
    PROFILE_KOD INTEGER
);
CREATE TABLE MAXES2 (
    CODE VARCHAR(20) NOT NULL,
    MAX_VALUE INTEGER NOT NULL
);
CREATE UNIQUE INDEX MAX_CODE ON MAXES2 (CODE);
CREATE TABLE MISCPROFILES (
    PROFILE_KOD INTEGER,
    WIN_KOD SMALLINT,
    ITEM_NAME VARCHAR(50),
    SVALUE VARCHAR(250)
);
CREATE UNIQUE INDEX MISCPROF_IDX ON MISCPROFILES (PROFILE_KOD, WIN_KOD);
CREATE UNIQUE INDEX MISCPROF_WIN_IDX ON MISCPROFILES (WIN_KOD);
CREATE TABLE MONEY_UNIT (
    KOD SMALLINT NOT NULL,
    SHORT_NAME VARCHAR(10),
    NAME VARCHAR(32),
    CENT_SHORT_NAME VARCHAR(10),
    CENT_NAME VARCHAR(32)
);
CREATE TABLE NAME_LIST (
    KOD SMALLINT NOT NULL,
    NTYPE SMALLINT,
    PERSON_POST VARCHAR(250),
    NAME VARCHAR(64)
);
CREATE TABLE OPTIONS (
    TERM_DAYS SMALLINT,
    TERM_DAYS_JUR SMALLINT,
    DBVERSION SMALLINT,
    AM_SHORT SMALLINT,
    DEF_UNIT SMALLINT,
    UPD SMALLINT,
    ITEMS_NO_INTEGER SMALLINT,
    MONEY_NAME VARCHAR(10),
    CENT_NAME VARCHAR(10),
    ITEMS_DASHED SMALLINT,
    ITEMS_UNIQUE SMALLINT,
    UDK_HIER INTEGER,
    UDK_SEPARATOR VARCHAR(2),
    LIBCIPHER VARCHAR(32),
    LIBNAME VARCHAR(254),
    USE_PRESENCE_IMP SMALLINT,
    USE_PRESENCE_EXP SMALLINT,
    ITEMNO_SEPARATOR CHAR(20),
    FORMULAR_TEXT VARCHAR(250),
    MAX_RESULTSET INTEGER,
    CLNT_VER INTEGER,
    CLNT_RED INTEGER,
    CLNT_MOD INTEGER,
    CHECK_RET_PLACE INTEGER,
    USE_PARTYNO SMALLINT,
    DIVISION_COLNAME VARCHAR(30),
    SUBDIV_COLNAME VARCHAR(30),
    DSCP_NAME VARCHAR(250),
    EXCHANGE_FOND INTEGER,
    CONFIRM_GETTING INTEGER,
    ORDER_TO_QUEUE SMALLINT,
    MIN_CLNT_VER INTEGER,
    MIN_CLNT_RED INTEGER,
    MIN_CLNT_MOD INTEGER,
    CONFIRM_DOCGETTING INTEGER,
    SUMMARY_START_DATE DATE,
    CONFIRM_DOCORDER SMALLINT
);
CREATE TABLE OPTIONS2 (
    OPTION_ID VARCHAR(100),
    OPTION_VALUE VARCHAR(250)
);
CREATE TABLE ORDERS (
    PERSON_ID INTEGER,
    PERSON_TYPE VARCHAR(1),
    DOC_ID INTEGER,
    STATUS SMALLINT,
    ITEM_ID INTEGER,
    ITEM_NO VARCHAR(32),
    PLACE_DATE TIMESTAMP,
    DEVICE_KOD SMALLINT,
    DELIVER_KOD SMALLINT,
    LAST_EDIT_USER VARCHAR(50)
);
CREATE TABLE ORDER_CHAIN (
    DELIVER_KOD SMALLINT,
    NORDER SMALLINT,
    DEVICE_KOD SMALLINT,
    FOREIGN KEY (DELIVER_KOD) REFERENCES STORAGE_LIST (KOD) ON DELETE CASCADE
);
CREATE TABLE ORG_ORDER (
    ID INTEGER NOT NULL,
    DOC_ID INTEGER,
    QTY SMALLINT,
    ORG_ID INTEGER,
    DATE_PLACE TIMESTAMP,
    DATE_MUST TIMESTAMP,
    DATE_RECEIVE TIMESTAMP,
    COMMENTT VARCHAR(200),
    ORD_STATUS SMALLINT,
    FOREIGN KEY (DOC_ID) REFERENCES DOCUMENT (DOC_ID) ON DELETE CASCADE
);
CREATE TABLE OUT_REASONS (
    KOD SMALLINT NOT NULL,
    NAME VARCHAR(32),
    PAR_KOD SMALLINT,
    NORDER SMALLINT
);
CREATE TABLE PARTY (
    KOD INTEGER NOT NULL,
    PARTY_NO VARCHAR(10),
    IN_DATE TIMESTAMP,
    STYPE CHAR(1),
    SOURCE_ID INTEGER,
    SOURCE_NAME VARCHAR(254),
    ACCOMPANY_DOC_DATE TIMESTAMP,
    ACCOMPANY_DOC_NO VARCHAR(20),
    COMMNT VARCHAR(250),
    DIRECTOR_POST VARCHAR(250),
    DIRECTOR_NAME VARCHAR(64),
    SIGNER1_POST VARCHAR(250),
    SIGNER1_NAME VARCHAR(64),
    SIGNER2_POST VARCHAR(250),
    SIGNER2_NAME VARCHAR(64),
    SIGNER3_POST VARCHAR(250),
    SIGNER3_NAME VARCHAR(64),
    FULL_TEXT VARCHAR(250),
    LAST_EDIT_DATE TIMESTAMP,
    LAST_EDIT_USER VARCHAR(30),
    WRITEOFF_PERSON VARCHAR(100),
    ACQUISITION_TYPE INTEGER,
    OUT_REASON INTEGER,
    COL202 INTEGER,
    COL203 INTEGER,
    COL206 INTEGER,
    COL207 DECIMAL(15, 2),
    COL208 INTEGER,
    COL209 INTEGER,
    COL211 INTEGER,
    COL212 INTEGER,
    COL213 INTEGER,
    COL214 INTEGER,
    COL215 INTEGER,
    COL216 INTEGER,
    COL217 INTEGER,
    COL218 INTEGER,
    COL220 INTEGER,
    COL221 INTEGER,
    COL222 INTEGER,
    COL224 INTEGER,
    COL225 INTEGER,
    SIGNER4_NAME VARCHAR(64),
    SIGNER4_POST VARCHAR(250),
    SIGNER5_NAME VARCHAR(64),
    SIGNER5_POST VARCHAR(250),
    SIGNER6_NAME VARCHAR(64),
    SIGNER6_POST VARCHAR(250),
    SIGNER7_NAME VARCHAR(64),
    SIGNER7_POST VARCHAR(250),
    SIGNER8_NAME VARCHAR(64),
    SIGNER8_POST VARCHAR(250),
    SIGNER9_NAME VARCHAR(64),
    SIGNER9_POST VARCHAR(250),
    SIGNER10_NAME VARCHAR(64),
    SIGNER10_POST VARCHAR(250)
);
CREATE UNIQUE INDEX PARTY_UNI ON PARTY (KOD);
CREATE TABLE PARTY_COND (
    PARTY_FIELD_KOD SMALLINT,
    FIELD_KOD INTEGER,
    PRED SMALLINT,
    PRED_TYPE SMALLINT,
    PRED_VALUE1 VARCHAR(250),
    PRED_VALUE2 VARCHAR(50),
    PRED_VALUE VARCHAR(250),
    FOREIGN KEY (PARTY_FIELD_KOD) REFERENCES PARTY_FIELDS (KOD) ON DELETE CASCADE
);
CREATE TABLE PARTY_FIELDS (
    KOD SMALLINT NOT NULL,
    NORDER SMALLINT,
    NAME VARCHAR(32),
    PARENT_KOD SMALLINT,
    ISVERT SMALLINT,
    INUSE SMALLINT,
    COND_USED SMALLINT,
    NTYPE SMALLINT,
    NAME2 VARCHAR(32),
    NAME3 VARCHAR(32),
    START_VALUE DECIMAL(12, 2),
    PRIMARY KEY (KOD)
);
CREATE TABLE PERSON_CARD (
    PERSON_ID INTEGER,
    PERSON_TYPE CHAR(1),
    ITEM_ID INTEGER,
    GET_DATE TIMESTAMP,
    RETURN_DATE TIMESTAMP,
    MUST_RETURN_DATE TIMESTAMP,
    COMMENTT VARCHAR(128),
    DELIVER_ID INTEGER NOT NULL,
    DELIVER_QTY SMALLINT,
    DELIVER_KOD SMALLINT,
    GET_USER VARCHAR(50),
    RETURN_USER VARCHAR(50),
    SIGNATURE VARCHAR(250)
);
CREATE UNIQUE INDEX PERSON_CARD_PERSON ON PERSON_CARD (PERSON_ID);
CREATE UNIQUE INDEX PERSON_CARD_ITEM ON PERSON_CARD (ITEM_ID);
CREATE UNIQUE INDEX PERSON_CARD_UNI ON PERSON_CARD (DELIVER_ID);
CREATE TABLE PHYSICAL_PERSON (
    ID INTEGER NOT NULL,
    NAME VARCHAR(64),
    BIRTH_DATE TIMESTAMP,
    ADDRESS VARCHAR(250),
    PASSPORT_SERIES VARCHAR(10),
    PASSPORT_NO INTEGER,
    WORK_PLACE VARCHAR(150),
    PERSON_POST VARCHAR(150),
    IN_USER VARCHAR(50),
    WORK_PHONE VARCHAR(100),
    HOME_PHONE VARCHAR(100),
    KOD DECIMAL(10, 0),
    EMAIL VARCHAR(80),
    MOBILE_PHONE VARCHAR(32),
    PAGER_NO INTEGER,
    PAGER_PHONE VARCHAR(32),
    CODE VARCHAR(32),
    STATUS VARCHAR(1),
    PHOTO_OLD BLOB SUB_TYPE 0,
    CODE_INTNO INTEGER,
    IS_BLOCKED SMALLINT,
    BLOCK_REASON VARCHAR(200),
    REGISTER_DATE TIMESTAMP,
    IN_DATE TIMESTAMP,
    LAST_EDIT_DATE TIMESTAMP,
    LAST_EDIT_USER VARCHAR(50),
    SPASSPORT_NO VARCHAR(15),
    PIN_CODE VARCHAR(250),
    SERVICE_BEGDATE TIMESTAMP,
    SERVICE_ENDDATE TIMESTAMP,
    CATEGORY_ID INTEGER,
    PASSPORT_ORG VARCHAR(128),
    SCOMMENT VARCHAR(250),
    TABLE_ID VARCHAR(30),
    BLOCK_EDIT_DATE TIMESTAMP,
    BLOCK_EDIT_USER VARCHAR(30),
    PERSON_STATUS CHAR(1),
    DIVISION VARCHAR(64),
    SUBDIVISION VARCHAR(64),
    POST_TYPE VARCHAR(20),
    STUDENT_COURSE VARCHAR(200),
    SPECIALITY VARCHAR(200),
    SPECIALIZATION VARCHAR(200),
    STUDENT_GROUP VARCHAR(100),
    AGE_CATEGORY VARCHAR(50),
    SOCIAL_CATEGORY VARCHAR(50),
    RFID VARCHAR(32),
    BARCODE VARCHAR(32),
    ACCESS_CATEGORY INTEGER,
    PERSON_PASSWORD VARCHAR(50)
);
CREATE UNIQUE INDEX PHYS_UNI ON PHYSICAL_PERSON (ID);
CREATE UNIQUE INDEX PHYS_NAME ON PHYSICAL_PERSON (NAME);
CREATE UNIQUE INDEX PHYS_PERS_ ON PHYSICAL_PERSON (KOD);
CREATE UNIQUE INDEX PHYS_CODE ON PHYSICAL_PERSON (CODE);
CREATE UNIQUE INDEX PHYSPERS_INTNO ON PHYSICAL_PERSON (CODE_INTNO);
CREATE UNIQUE INDEX PHYS_PERS_TABID ON PHYSICAL_PERSON (TABLE_ID);
CREATE TABLE PRIMARY_FIELD (
    KOD SMALLINT NOT NULL
);
CREATE TABLE PRINT_HEADER (
    KOD SMALLINT NOT NULL,
    HFTYPE SMALLINT,
    SVALUE VARCHAR(80)
);
CREATE TABLE PROFILELIST (
    SUSER_NAME VARCHAR(50),
    KOD INTEGER NOT NULL,
    NAME VARCHAR(64),
    NTYPE SMALLINT,
    GROUP_KOD INTEGER
);
CREATE UNIQUE INDEX PROFLST_USER ON PROFILELIST (SUSER_NAME);
CREATE UNIQUE INDEX PROFLST_IDX ON PROFILELIST (KOD);
CREATE TABLE PUBLISHER_LIST (
    KOD SMALLINT NOT NULL,
    NAME VARCHAR(80),
    FULLNAME VARCHAR(80)
);
CREATE UNIQUE INDEX PUBLISHER_IDX ON PUBLISHER_LIST (KOD);
CREATE TABLE RDB$CHARACTER_SETS (
    RDB$CHARACTER_SET_NAME CHAR(31),
    RDB$FORM_OF_USE CHAR(31),
    RDB$NUMBER_OF_CHARACTERS INTEGER,
    RDB$DEFAULT_COLLATE_NAME CHAR(31),
    RDB$CHARACTER_SET_ID SMALLINT,
    RDB$SYSTEM_FLAG SMALLINT,
    RDB$DESCRIPTION BLOB SUB_TYPE 1,
    RDB$FUNCTION_NAME CHAR(31),
    RDB$BYTES_PER_CHARACTER SMALLINT
);
CREATE UNIQUE INDEX RDB$INDEX_19 ON RDB$CHARACTER_SETS (RDB$CHARACTER_SET_NAME);
CREATE UNIQUE INDEX RDB$INDEX_25 ON RDB$CHARACTER_SETS (RDB$CHARACTER_SET_ID);
CREATE TABLE RDB$CHECK_CONSTRAINTS (
    RDB$CONSTRAINT_NAME CHAR(31),
    RDB$TRIGGER_NAME CHAR(31)
);
CREATE UNIQUE INDEX RDB$INDEX_14 ON RDB$CHECK_CONSTRAINTS (RDB$CONSTRAINT_NAME);
CREATE UNIQUE INDEX RDB$INDEX_40 ON RDB$CHECK_CONSTRAINTS (RDB$TRIGGER_NAME);
CREATE TABLE RDB$COLLATIONS (
    RDB$COLLATION_NAME CHAR(31),
    RDB$COLLATION_ID SMALLINT,
    RDB$CHARACTER_SET_ID SMALLINT,
    RDB$COLLATION_ATTRIBUTES SMALLINT,
    RDB$SYSTEM_FLAG SMALLINT,
    RDB$DESCRIPTION BLOB SUB_TYPE 1,
    RDB$FUNCTION_NAME CHAR(31)
);
CREATE UNIQUE INDEX RDB$INDEX_20 ON RDB$COLLATIONS (RDB$COLLATION_NAME);
CREATE UNIQUE INDEX RDB$INDEX_26 ON RDB$COLLATIONS (RDB$COLLATION_ID, RDB$CHARACTER_SET_ID);
CREATE TABLE RDB$DATABASE (
    RDB$DESCRIPTION BLOB SUB_TYPE 1,
    RDB$RELATION_ID SMALLINT,
    RDB$SECURITY_CLASS CHAR(31),
    RDB$CHARACTER_SET_NAME CHAR(31)
);
CREATE TABLE RDB$DEPENDENCIES (
    RDB$DEPENDENT_NAME CHAR(31),
    RDB$DEPENDED_ON_NAME CHAR(31),
    RDB$FIELD_NAME CHAR(31),
    RDB$DEPENDENT_TYPE SMALLINT,
    RDB$DEPENDED_ON_TYPE SMALLINT
);
CREATE UNIQUE INDEX RDB$INDEX_27 ON RDB$DEPENDENCIES (RDB$DEPENDENT_NAME);
CREATE UNIQUE INDEX RDB$INDEX_28 ON RDB$DEPENDENCIES (RDB$DEPENDED_ON_NAME);
CREATE TABLE RDB$EXCEPTIONS (
    RDB$EXCEPTION_NAME CHAR(31),
    RDB$EXCEPTION_NUMBER INTEGER,
    RDB$MESSAGE VARCHAR(78),
    RDB$DESCRIPTION BLOB SUB_TYPE 1,
    RDB$SYSTEM_FLAG SMALLINT
);
CREATE UNIQUE INDEX RDB$INDEX_23 ON RDB$EXCEPTIONS (RDB$EXCEPTION_NAME);
CREATE UNIQUE INDEX RDB$INDEX_24 ON RDB$EXCEPTIONS (RDB$EXCEPTION_NUMBER);
CREATE TABLE RDB$FIELDS (
    RDB$FIELD_NAME CHAR(31),
    RDB$QUERY_NAME CHAR(31),
    RDB$VALIDATION_BLR BLOB SUB_TYPE 2,
    RDB$VALIDATION_SOURCE BLOB SUB_TYPE 1,
    RDB$COMPUTED_BLR BLOB SUB_TYPE 2,
    RDB$COMPUTED_SOURCE BLOB SUB_TYPE 1,
    RDB$DEFAULT_VALUE BLOB SUB_TYPE 2,
    RDB$DEFAULT_SOURCE BLOB SUB_TYPE 1,
    RDB$FIELD_LENGTH SMALLINT,
    RDB$FIELD_SCALE SMALLINT,
    RDB$FIELD_TYPE SMALLINT,
    RDB$FIELD_SUB_TYPE SMALLINT,
    RDB$MISSING_VALUE BLOB SUB_TYPE 2,
    RDB$MISSING_SOURCE BLOB SUB_TYPE 1,
    RDB$DESCRIPTION BLOB SUB_TYPE 1,
    RDB$SYSTEM_FLAG SMALLINT,
    RDB$QUERY_HEADER BLOB SUB_TYPE 1,
    RDB$SEGMENT_LENGTH SMALLINT,
    RDB$EDIT_STRING VARCHAR(125),
    RDB$EXTERNAL_LENGTH SMALLINT,
    RDB$EXTERNAL_SCALE SMALLINT,
    RDB$EXTERNAL_TYPE SMALLINT,
    RDB$DIMENSIONS SMALLINT,
    RDB$NULL_FLAG SMALLINT,
    RDB$CHARACTER_LENGTH SMALLINT,
    RDB$COLLATION_ID SMALLINT,
    RDB$CHARACTER_SET_ID SMALLINT,
    RDB$FIELD_PRECISION SMALLINT
);
CREATE UNIQUE INDEX RDB$INDEX_2 ON RDB$FIELDS (RDB$FIELD_NAME);
CREATE TABLE RDB$FIELD_DIMENSIONS (
    RDB$FIELD_NAME CHAR(31),
    RDB$DIMENSION SMALLINT,
    RDB$LOWER_BOUND INTEGER,
    RDB$UPPER_BOUND INTEGER
);
CREATE UNIQUE INDEX RDB$INDEX_36 ON RDB$FIELD_DIMENSIONS (RDB$FIELD_NAME);
CREATE TABLE RDB$FILES (
    RDB$FILE_NAME VARCHAR(253),
    RDB$FILE_SEQUENCE SMALLINT,
    RDB$FILE_START INTEGER,
    RDB$FILE_LENGTH INTEGER,
    RDB$FILE_FLAGS SMALLINT,
    RDB$SHADOW_NUMBER SMALLINT
);
CREATE TABLE RDB$FILTERS (
    RDB$FUNCTION_NAME CHAR(31),
    RDB$DESCRIPTION BLOB SUB_TYPE 1,
    RDB$MODULE_NAME VARCHAR(253),
    RDB$ENTRYPOINT CHAR(31),
    RDB$INPUT_SUB_TYPE SMALLINT,
    RDB$OUTPUT_SUB_TYPE SMALLINT,
    RDB$SYSTEM_FLAG SMALLINT
);
CREATE UNIQUE INDEX RDB$INDEX_17 ON RDB$FILTERS (RDB$INPUT_SUB_TYPE, RDB$OUTPUT_SUB_TYPE);
CREATE TABLE RDB$FORMATS (
    RDB$RELATION_ID SMALLINT,
    RDB$FORMAT SMALLINT,
    RDB$DESCRIPTOR BLOB SUB_TYPE 6
);
CREATE UNIQUE INDEX RDB$INDEX_16 ON RDB$FORMATS (RDB$RELATION_ID, RDB$FORMAT);
CREATE TABLE RDB$FUNCTIONS (
    RDB$FUNCTION_NAME CHAR(31),
    RDB$FUNCTION_TYPE SMALLINT,
    RDB$QUERY_NAME CHAR(31),
    RDB$DESCRIPTION BLOB SUB_TYPE 1,
    RDB$MODULE_NAME VARCHAR(253),
    RDB$ENTRYPOINT CHAR(31),
    RDB$RETURN_ARGUMENT SMALLINT,
    RDB$SYSTEM_FLAG SMALLINT
);
CREATE UNIQUE INDEX RDB$INDEX_9 ON RDB$FUNCTIONS (RDB$FUNCTION_NAME);
CREATE TABLE RDB$FUNCTION_ARGUMENTS (
    RDB$FUNCTION_NAME CHAR(31),
    RDB$ARGUMENT_POSITION SMALLINT,
    RDB$MECHANISM SMALLINT,
    RDB$FIELD_TYPE SMALLINT,
    RDB$FIELD_SCALE SMALLINT,
    RDB$FIELD_LENGTH SMALLINT,
    RDB$FIELD_SUB_TYPE SMALLINT,
    RDB$CHARACTER_SET_ID SMALLINT,
    RDB$FIELD_PRECISION SMALLINT,
    RDB$CHARACTER_LENGTH SMALLINT
);
CREATE UNIQUE INDEX RDB$INDEX_10 ON RDB$FUNCTION_ARGUMENTS (RDB$FUNCTION_NAME);
CREATE TABLE RDB$GENERATORS (
    RDB$GENERATOR_NAME CHAR(31),
    RDB$GENERATOR_ID SMALLINT,
    RDB$SYSTEM_FLAG SMALLINT
);
CREATE UNIQUE INDEX RDB$INDEX_11 ON RDB$GENERATORS (RDB$GENERATOR_NAME);
CREATE TABLE RDB$INDEX_SEGMENTS (
    RDB$INDEX_NAME CHAR(31),
    RDB$FIELD_NAME CHAR(31),
    RDB$FIELD_POSITION SMALLINT
);
CREATE UNIQUE INDEX RDB$INDEX_6 ON RDB$INDEX_SEGMENTS (RDB$INDEX_NAME);
CREATE TABLE RDB$INDICES (
    RDB$INDEX_NAME CHAR(31),
    RDB$RELATION_NAME CHAR(31),
    RDB$INDEX_ID SMALLINT,
    RDB$UNIQUE_FLAG SMALLINT,
    RDB$DESCRIPTION BLOB SUB_TYPE 1,
    RDB$SEGMENT_COUNT SMALLINT,
    RDB$INDEX_INACTIVE SMALLINT,
    RDB$INDEX_TYPE SMALLINT,
    RDB$FOREIGN_KEY CHAR(31),
    RDB$SYSTEM_FLAG SMALLINT,
    RDB$EXPRESSION_BLR BLOB SUB_TYPE 2,
    RDB$EXPRESSION_SOURCE BLOB SUB_TYPE 1,
    RDB$STATISTICS DOUBLE PRECISION(15, 0)
);
CREATE UNIQUE INDEX RDB$INDEX_5 ON RDB$INDICES (RDB$INDEX_NAME);
CREATE UNIQUE INDEX RDB$INDEX_31 ON RDB$INDICES (RDB$RELATION_NAME);
CREATE UNIQUE INDEX RDB$INDEX_41 ON RDB$INDICES (RDB$FOREIGN_KEY);
CREATE TABLE RDB$LOG_FILES (
    RDB$FILE_NAME VARCHAR(253),
    RDB$FILE_SEQUENCE SMALLINT,
    RDB$FILE_LENGTH INTEGER,
    RDB$FILE_PARTITIONS SMALLINT,
    RDB$FILE_P_OFFSET INTEGER,
    RDB$FILE_FLAGS SMALLINT
);
CREATE TABLE RDB$PAGES (
    RDB$PAGE_NUMBER INTEGER,
    RDB$RELATION_ID SMALLINT,
    RDB$PAGE_SEQUENCE INTEGER,
    RDB$PAGE_TYPE SMALLINT
);
CREATE TABLE RDB$PROCEDURES (
    RDB$PROCEDURE_NAME CHAR(31),
    RDB$PROCEDURE_ID SMALLINT,
    RDB$PROCEDURE_INPUTS SMALLINT,
    RDB$PROCEDURE_OUTPUTS SMALLINT,
    RDB$DESCRIPTION BLOB SUB_TYPE 1,
    RDB$PROCEDURE_SOURCE BLOB SUB_TYPE 1,
    RDB$PROCEDURE_BLR BLOB SUB_TYPE 2,
    RDB$SECURITY_CLASS CHAR(31),
    RDB$OWNER_NAME CHAR(31),
    RDB$RUNTIME BLOB SUB_TYPE 5,
    RDB$SYSTEM_FLAG SMALLINT
);
CREATE UNIQUE INDEX RDB$INDEX_21 ON RDB$PROCEDURES (RDB$PROCEDURE_NAME);
CREATE UNIQUE INDEX RDB$INDEX_22 ON RDB$PROCEDURES (RDB$PROCEDURE_ID);
CREATE TABLE RDB$PROCEDURE_PARAMETERS (
    RDB$PARAMETER_NAME CHAR(31),
    RDB$PROCEDURE_NAME CHAR(31),
    RDB$PARAMETER_NUMBER SMALLINT,
    RDB$PARAMETER_TYPE SMALLINT,
    RDB$FIELD_SOURCE CHAR(31),
    RDB$DESCRIPTION BLOB SUB_TYPE 1,
    RDB$SYSTEM_FLAG SMALLINT
);
CREATE UNIQUE INDEX RDB$INDEX_18 ON RDB$PROCEDURE_PARAMETERS (RDB$PROCEDURE_NAME, RDB$PARAMETER_NAME);
CREATE TABLE RDB$REF_CONSTRAINTS (
    RDB$CONSTRAINT_NAME CHAR(31),
    RDB$CONST_NAME_UQ CHAR(31),
    RDB$MATCH_OPTION CHAR(7),
    RDB$UPDATE_RULE CHAR(11),
    RDB$DELETE_RULE CHAR(11)
);
CREATE UNIQUE INDEX RDB$INDEX_13 ON RDB$REF_CONSTRAINTS (RDB$CONSTRAINT_NAME);
CREATE TABLE RDB$RELATIONS (
    RDB$VIEW_BLR BLOB SUB_TYPE 2,
    RDB$VIEW_SOURCE BLOB SUB_TYPE 1,
    RDB$DESCRIPTION BLOB SUB_TYPE 1,
    RDB$RELATION_ID SMALLINT,
    RDB$SYSTEM_FLAG SMALLINT,
    RDB$DBKEY_LENGTH SMALLINT,
    RDB$FORMAT SMALLINT,
    RDB$FIELD_ID SMALLINT,
    RDB$RELATION_NAME CHAR(31),
    RDB$SECURITY_CLASS CHAR(31),
    RDB$EXTERNAL_FILE VARCHAR(253),
    RDB$RUNTIME BLOB SUB_TYPE 5,
    RDB$EXTERNAL_DESCRIPTION BLOB SUB_TYPE 8,
    RDB$OWNER_NAME CHAR(31),
    RDB$DEFAULT_CLASS CHAR(31),
    RDB$FLAGS SMALLINT
);
CREATE UNIQUE INDEX RDB$INDEX_1 ON RDB$RELATIONS (RDB$RELATION_ID);
CREATE UNIQUE INDEX RDB$INDEX_0 ON RDB$RELATIONS (RDB$RELATION_NAME);
CREATE TABLE RDB$RELATION_CONSTRAINTS (
    RDB$CONSTRAINT_NAME CHAR(31),
    RDB$CONSTRAINT_TYPE CHAR(11),
    RDB$RELATION_NAME CHAR(31),
    RDB$DEFERRABLE CHAR(3),
    RDB$INITIALLY_DEFERRED CHAR(3),
    RDB$INDEX_NAME CHAR(31)
);
CREATE UNIQUE INDEX RDB$INDEX_12 ON RDB$RELATION_CONSTRAINTS (RDB$CONSTRAINT_NAME);
CREATE UNIQUE INDEX RDB$INDEX_42 ON RDB$RELATION_CONSTRAINTS (RDB$RELATION_NAME, RDB$CONSTRAINT_TYPE);
CREATE UNIQUE INDEX RDB$INDEX_43 ON RDB$RELATION_CONSTRAINTS (RDB$INDEX_NAME);
CREATE TABLE RDB$RELATION_FIELDS (
    RDB$FIELD_NAME CHAR(31),
    RDB$RELATION_NAME CHAR(31),
    RDB$FIELD_SOURCE CHAR(31),
    RDB$QUERY_NAME CHAR(31),
    RDB$BASE_FIELD CHAR(31),
    RDB$EDIT_STRING VARCHAR(125),
    RDB$FIELD_POSITION SMALLINT,
    RDB$QUERY_HEADER BLOB SUB_TYPE 1,
    RDB$UPDATE_FLAG SMALLINT,
    RDB$FIELD_ID SMALLINT,
    RDB$VIEW_CONTEXT SMALLINT,
    RDB$DESCRIPTION BLOB SUB_TYPE 1,
    RDB$DEFAULT_VALUE BLOB SUB_TYPE 2,
    RDB$SYSTEM_FLAG SMALLINT,
    RDB$SECURITY_CLASS CHAR(31),
    RDB$COMPLEX_NAME CHAR(31),
    RDB$NULL_FLAG SMALLINT,
    RDB$DEFAULT_SOURCE BLOB SUB_TYPE 1,
    RDB$COLLATION_ID SMALLINT
);
CREATE UNIQUE INDEX RDB$INDEX_15 ON RDB$RELATION_FIELDS (RDB$FIELD_NAME, RDB$RELATION_NAME);
CREATE UNIQUE INDEX RDB$INDEX_4 ON RDB$RELATION_FIELDS (RDB$RELATION_NAME);
CREATE UNIQUE INDEX RDB$INDEX_3 ON RDB$RELATION_FIELDS (RDB$FIELD_SOURCE);
CREATE TABLE RDB$ROLES (
    RDB$ROLE_NAME CHAR(31),
    RDB$OWNER_NAME CHAR(31)
);
CREATE UNIQUE INDEX RDB$INDEX_39 ON RDB$ROLES (RDB$ROLE_NAME);
CREATE TABLE RDB$SECURITY_CLASSES (
    RDB$SECURITY_CLASS CHAR(31),
    RDB$ACL BLOB SUB_TYPE 3,
    RDB$DESCRIPTION BLOB SUB_TYPE 1
);
CREATE UNIQUE INDEX RDB$INDEX_7 ON RDB$SECURITY_CLASSES (RDB$SECURITY_CLASS);
CREATE TABLE RDB$TRANSACTIONS (
    RDB$TRANSACTION_ID INTEGER,
    RDB$TRANSACTION_STATE SMALLINT,
    RDB$TIMESTAMP TIMESTAMP,
    RDB$TRANSACTION_DESCRIPTION BLOB SUB_TYPE 7
);
CREATE UNIQUE INDEX RDB$INDEX_32 ON RDB$TRANSACTIONS (RDB$TRANSACTION_ID);
CREATE TABLE RDB$TRIGGERS (
    RDB$TRIGGER_NAME CHAR(31),
    RDB$RELATION_NAME CHAR(31),
    RDB$TRIGGER_SEQUENCE SMALLINT,
    RDB$TRIGGER_TYPE SMALLINT,
    RDB$TRIGGER_SOURCE BLOB SUB_TYPE 1,
    RDB$TRIGGER_BLR BLOB SUB_TYPE 2,
    RDB$DESCRIPTION BLOB SUB_TYPE 1,
    RDB$TRIGGER_INACTIVE SMALLINT,
    RDB$SYSTEM_FLAG SMALLINT,
    RDB$FLAGS SMALLINT
);
CREATE UNIQUE INDEX RDB$INDEX_8 ON RDB$TRIGGERS (RDB$TRIGGER_NAME);
CREATE UNIQUE INDEX RDB$INDEX_38 ON RDB$TRIGGERS (RDB$RELATION_NAME);
CREATE TABLE RDB$TRIGGER_MESSAGES (
    RDB$TRIGGER_NAME CHAR(31),
    RDB$MESSAGE_NUMBER SMALLINT,
    RDB$MESSAGE VARCHAR(78)
);
CREATE UNIQUE INDEX RDB$INDEX_35 ON RDB$TRIGGER_MESSAGES (RDB$TRIGGER_NAME);
CREATE TABLE RDB$TYPES (
    RDB$FIELD_NAME CHAR(31),
    RDB$TYPE SMALLINT,
    RDB$TYPE_NAME CHAR(31),
    RDB$DESCRIPTION BLOB SUB_TYPE 1,
    RDB$SYSTEM_FLAG SMALLINT
);
CREATE UNIQUE INDEX RDB$INDEX_37 ON RDB$TYPES (RDB$TYPE_NAME);
CREATE TABLE RDB$USER_PRIVILEGES (
    RDB$USER CHAR(31),
    RDB$GRANTOR CHAR(31),
    RDB$PRIVILEGE CHAR(6),
    RDB$GRANT_OPTION SMALLINT,
    RDB$RELATION_NAME CHAR(31),
    RDB$FIELD_NAME CHAR(31),
    RDB$USER_TYPE SMALLINT,
    RDB$OBJECT_TYPE SMALLINT
);
CREATE UNIQUE INDEX RDB$INDEX_30 ON RDB$USER_PRIVILEGES (RDB$USER);
CREATE UNIQUE INDEX RDB$INDEX_29 ON RDB$USER_PRIVILEGES (RDB$RELATION_NAME);
CREATE TABLE RDB$VIEW_RELATIONS (
    RDB$VIEW_NAME CHAR(31),
    RDB$RELATION_NAME CHAR(31),
    RDB$VIEW_CONTEXT SMALLINT,
    RDB$CONTEXT_NAME CHAR(31)
);
CREATE UNIQUE INDEX RDB$INDEX_33 ON RDB$VIEW_RELATIONS (RDB$VIEW_NAME);
CREATE UNIQUE INDEX RDB$INDEX_34 ON RDB$VIEW_RELATIONS (RDB$RELATION_NAME);
CREATE TABLE READER_CATEGORY (
    ID INTEGER NOT NULL,
    NAME VARCHAR(200),
    PREFIX VARCHAR(20),
    SUFFIX VARCHAR(20),
    DIGIT_QTY SMALLINT
);
CREATE TABLE READER_PHOTO (
    ID INTEGER NOT NULL,
    FLD_TYPE SMALLINT NOT NULL,
    NORDER INTEGER NOT NULL,
    FRAGMENT01 VARCHAR(250),
    FRAGMENT02 VARCHAR(250),
    FRAGMENT03 VARCHAR(250),
    FRAGMENT04 VARCHAR(250),
    FRAGMENT05 VARCHAR(250),
    FRAGMENT06 VARCHAR(250),
    FRAGMENT07 VARCHAR(250),
    FRAGMENT08 VARCHAR(250)
);
CREATE UNIQUE INDEX READER_PHOTO_IDX ON READER_PHOTO (ID, FLD_TYPE, NORDER);
CREATE TABLE READER_PHOTO2 (
    ID INTEGER,
    FIELD_TYPE INTEGER,
    FRAGMENT_ORDER INTEGER,
    FRAGMENT_VALUE VARCHAR(250)
);
CREATE UNIQUE INDEX READER_PHOTO2_IDX ON READER_PHOTO2 (ID, FIELD_TYPE, FRAGMENT_ORDER);
CREATE TABLE READER_SRV_PLACE (
    READER_ID INTEGER,
    PLACE_ID INTEGER
);
CREATE UNIQUE INDEX READER_SRV_IDX1 ON READER_SRV_PLACE (READER_ID);
CREATE UNIQUE INDEX READER_SRV_IDX2 ON READER_SRV_PLACE (PLACE_ID);
CREATE TABLE READER_VISIT (
    PERSON_ID INTEGER,
    LOCK_ID INTEGER,
    LOCK_DIRECTION VARCHAR(10),
    PLACE_ID INTEGER,
    VISIT_TIME TIMESTAMP
);
CREATE UNIQUE INDEX RDRVISIT_PERSONIDX ON READER_VISIT (PERSON_ID);
CREATE UNIQUE INDEX RDRVISIT_LOCKIDX ON READER_VISIT (LOCK_ID);
CREATE UNIQUE INDEX RDRVISIT_PLACEIDX ON READER_VISIT (PLACE_ID);
CREATE UNIQUE INDEX RDRVISIT_TIMEIDX ON READER_VISIT (VISIT_TIME);
CREATE TABLE REFUSE_STAT (
    PERSON_ID INTEGER,
    PERSON_TYPE CHAR(1),
    DOC_ID INTEGER,
    ITEM_ID INTEGER,
    REASON_KOD SMALLINT,
    REASON_STRING VARCHAR(64),
    DEVICE_KOD SMALLINT,
    DELIVER_KOD SMALLINT,
    DATE_REFUSE TIMESTAMP,
    PLACE_DATE TIMESTAMP,
    USER_REFUSE VARCHAR(30),
    REFUSE_TYPE SMALLINT
);
CREATE TABLE REFUSE_TYPES (
    KOD INTEGER NOT NULL,
    NAME VARCHAR(80),
    IS_DEFAULT SMALLINT
);
CREATE TABLE REF_CARD (
    CARD_ID INTEGER,
    CARD_REF INTEGER,
    NORDER SMALLINT
);
CREATE UNIQUE INDEX REF_UNI ON REF_CARD (CARD_ID, CARD_REF);
CREATE UNIQUE INDEX REF_IND1 ON REF_CARD (CARD_ID);
CREATE UNIQUE INDEX REF_IND2 ON REF_CARD (CARD_REF);
CREATE TABLE REF_DOC (
    CARD_ID INTEGER NOT NULL,
    DOC_ID INTEGER NOT NULL
);
CREATE UNIQUE INDEX REF_DOC_UNI2 ON REF_DOC (CARD_ID, DOC_ID);
CREATE UNIQUE INDEX REF_DOC_UNI ON REF_DOC (DOC_ID, CARD_ID);
CREATE TABLE SERVICE_LIST (
    SERVICE_ID INTEGER,
    SERVICE_TYPE INTEGER,
    PLACE_ID INTEGER,
    READER_ID INTEGER,
    SERVICE_DATE DATE,
    SERVICE_TIME TIMESTAMP,
    NUMBER_INFO INTEGER,
    SERVICE_COMMENT VARCHAR(250),
    IN_USER VARCHAR(50),
    SERVICE_COST DECIMAL(10, 2)
);
CREATE UNIQUE INDEX SERVICE_IDX1 ON SERVICE_LIST (SERVICE_ID);
CREATE UNIQUE INDEX SERVICE_IDX2 ON SERVICE_LIST (SERVICE_TYPE);
CREATE UNIQUE INDEX SERVICE_IDX3 ON SERVICE_LIST (PLACE_ID);
CREATE UNIQUE INDEX SERVICE_IDX4 ON SERVICE_LIST (SERVICE_DATE);
CREATE UNIQUE INDEX SERVICE_IDX5 ON SERVICE_LIST (SERVICE_TIME);
CREATE TABLE SERVICE_PLACE (
    ID INTEGER,
    NAME VARCHAR(250)
);
CREATE TABLE SERVICE_TYPE (
    ID INTEGER,
    NAME VARCHAR(250)
);
CREATE TABLE SPECIALITY_LIST (
    KOD SMALLINT,
    NAME VARCHAR(80)
);
CREATE TABLE STOCK_LIST (
    KOD SMALLINT NOT NULL,
    NAME VARCHAR(48)
);
CREATE TABLE STORAGE_LIST (
    KOD SMALLINT NOT NULL,
    NAME VARCHAR(32),
    IS_DISTRIBUTION SMALLINT,
    STYPE VARCHAR(1),
    READER_QTY INTEGER,
    FILE_READER_QTY INTEGER,
    SHORT_NAME VARCHAR(32),
    PRIMARY KEY (KOD)
);
CREATE TABLE SUBDIVISION_LIST (
    KOD SMALLINT,
    NAME VARCHAR(250),
    DIVISION_KOD SMALLINT
);
CREATE UNIQUE INDEX SUBDIVISION_IDX ON SUBDIVISION_LIST (KOD);
CREATE TABLE TABLEPROFILE (
    NAME VARCHAR(20),
    PROFILE VARCHAR(100)
);
CREATE TABLE TEMPLATE_BODY (
    ID INTEGER NOT NULL,
    FLD_TYPE SMALLINT NOT NULL,
    NORDER INTEGER NOT NULL,
    FRAGMENT01 VARCHAR(250),
    FRAGMENT02 VARCHAR(250),
    FRAGMENT03 VARCHAR(250),
    FRAGMENT04 VARCHAR(250),
    FRAGMENT05 VARCHAR(250),
    FRAGMENT06 VARCHAR(250),
    FRAGMENT07 VARCHAR(250),
    FRAGMENT08 VARCHAR(250)
);
CREATE UNIQUE INDEX TEMPLATE_BODY_IDX ON TEMPLATE_BODY (ID, FLD_TYPE, NORDER);
CREATE TABLE TEMPLATE_DATASRC (
    TEMPLATE_CODE SMALLINT,
    DATASRC_CODE SMALLINT
);
CREATE TABLE TEMPLATE_XML (
    CODE INTEGER,
    NTYPE INTEGER,
    NAME VARCHAR(100),
    BODY_OLD BLOB SUB_TYPE 0,
    ISDEFAULT INTEGER
);
CREATE TABLE TEMPOR (
    UNI_KOD INTEGER,
    ID INTEGER
);
CREATE TABLE TEST_TABLE (
    ID INTEGER NOT NULL,
    PRIMARY KEY (ID)
);
CREATE TABLE TTP (
    ID INTEGER NOT NULL,
    DSCP_ID INTEGER,
    DIVISION INTEGER,
    SUBDIVISION INTEGER,
    ACQUISITION_NORM DECIMAL(6, 2),
    STUDENT_QTY INTEGER,
    STUDENT_CONTR_QTY INTEGER,
    DISTRIBUTION INTEGER,
    CONTR_NORM DECIMAL(6, 2),
    FLD102 INTEGER,
    FLD103 INTEGER,
    FLD104 INTEGER,
    FLD105 INTEGER,
    DAY_FROM INTEGER,
    DAY_TO INTEGER,
    IS_ACTIVE INTEGER
);
CREATE TABLE TTPHIER_FLDORDER (
    FLD_ID INTEGER NOT NULL,
    NORDER INTEGER NOT NULL
);
CREATE TABLE TTPHIER_OPTIONS (
    FLD_USED_QTY INTEGER NOT NULL,
    SHOW_UNUSED INTEGER NOT NULL,
    SHOW_READER_QTY INTEGER NOT NULL
);
CREATE TABLE TTP_FIELD (
    ID INTEGER NOT NULL,
    NAME VARCHAR(200),
    NORDER SMALLINT
);
CREATE TABLE TTP_FIELD_ENUM (
    FLD_ID INTEGER NOT NULL,
    ENUM_ID INTEGER NOT NULL,
    NAME VARCHAR(200),
    NORDER INTEGER
);
CREATE TABLE TYPE_LIST (
    KOD SMALLINT NOT NULL,
    NAME VARCHAR(80)
);
CREATE UNIQUE INDEX TYPE_IDX ON TYPE_LIST (KOD);
CREATE TABLE TYPICAL_VALUES (
    VALUE_TYPE VARCHAR(50),
    VALUE_TEXT VARCHAR(250),
    VALUE_ORDER INTEGER
);
CREATE TABLE USED_KOD (
    KOD INTEGER,
    NEWKOD INTEGER
);
CREATE UNIQUE INDEX USED_UNI ON USED_KOD (KOD, NEWKOD);
CREATE TABLE USERGROUP (
    ALIAS VARCHAR(50) NOT NULL,
    GROUPCODE INTEGER,
    ISDEFAULT SMALLINT
);
CREATE UNIQUE INDEX USERGRP_IDX ON USERGROUP (ALIAS, GROUPCODE);
CREATE TABLE USERLIST (
    ALIAS VARCHAR(50),
    NAME VARCHAR(250)
);
CREATE UNIQUE INDEX USERLIST_ALIAS_IDX ON USERLIST (ALIAS);
CREATE TABLE USERREP_AUTHORITY (
    REP_CODE INTEGER NOT NULL,
    GROUP_CODE INTEGER NOT NULL
);
CREATE TABLE USER_REPORTS (
    KOD SMALLINT,
    "SQL" BLOB SUB_TYPE 0,
    NAME VARCHAR(64),
    FILENAME VARCHAR(100),
    BODY BLOB SUB_TYPE 0
);
CREATE TABLE WINPROFILES (
    PROFILE_KOD INTEGER,
    NORDER SMALLINT,
    WIN_KOD SMALLINT,
    WINDOW_NAME VARCHAR(40),
    WIN_TYPE SMALLINT,
    WIN_AUX_INT INTEGER,
    WIN_AUX_STR VARCHAR(100),
    WIN_X DECIMAL(10, 3),
    WIN_Y DECIMAL(10, 3),
    WIN_W DECIMAL(10, 3),
    WIN_H DECIMAL(10, 3),
    WIN_STATE SMALLINT
);
CREATE UNIQUE INDEX WINPROF_UNI ON WINPROFILES (PROFILE_KOD, WIN_KOD);
CREATE UNIQUE INDEX WINPROF_IDX2 ON WINPROFILES (PROFILE_KOD, WINDOW_NAME);
CREATE UNIQUE INDEX WINPROF_IDX ON WINPROFILES (PROFILE_KOD);
CREATE UNIQUE INDEX WINPROF_WIN_IDX ON WINPROFILES (WIN_KOD);
CREATE UNIQUE INDEX WINPROF_WIN2_IDX ON WINPROFILES (WINDOW_NAME);
CREATE TABLE WORD_INDEX (
    DOC_ID INTEGER,
    FIELD_KOD SMALLINT,
    WORD VARCHAR(50),
    FOREIGN KEY (DOC_ID) REFERENCES DOCUMENT (DOC_ID) ON DELETE CASCADE
);
CREATE UNIQUE INDEX WORD_FLD_IDX ON WORD_INDEX (FIELD_KOD, WORD, DOC_ID);