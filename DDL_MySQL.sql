DROP TABLE IF EXISTS ACC_ELDOCS         ;
DROP TABLE IF EXISTS ACQUISITION_TYPES  ;
DROP TABLE IF EXISTS ANNOT_WORD_INDEX   ;
DROP TABLE IF EXISTS AUTHORITYLIST      ;
DROP TABLE IF EXISTS AUTHOR_LIST        ;
DROP TABLE IF EXISTS AUTHOR_MARK_LIST   ;
DROP TABLE IF EXISTS AUTHOR_SYNONYM     ;
DROP TABLE IF EXISTS AUTHOR_WORD_INDEX  ;
DROP TABLE IF EXISTS AUTH_TYPE_MAIN     ;
DROP TABLE IF EXISTS BLOCKREASON_LIST   ;
DROP TABLE IF EXISTS CARDS              ;
DROP TABLE IF EXISTS CITY_LIST          ;
DROP TABLE IF EXISTS CLIENT_FILES       ;
DROP TABLE IF EXISTS CODE_PARSING_LIST  ;
DROP TABLE IF EXISTS CODE_PARSING_RULES ;
DROP TABLE IF EXISTS COLPROFILES        ;
DROP TABLE IF EXISTS DEVICES            ;
DROP TABLE IF EXISTS DICTION_LIST       ;
DROP TABLE IF EXISTS DICTION_WORD       ;
DROP TABLE IF EXISTS DISCIPLINE         ;
DROP TABLE IF EXISTS DIVISION_LIST      ;
DROP TABLE IF EXISTS DOCNAME_LIST       ;
DROP TABLE IF EXISTS DOCTYPE            ;
DROP TABLE IF EXISTS DOCTYPE_FIELD      ;
DROP TABLE IF EXISTS DOC_ITEM           ;
DROP TABLE IF EXISTS DOCXFIELD_VALUE    ;
DROP TABLE IF EXISTS DOCXFIELD_LIST     ;
DROP TABLE IF EXISTS DOC_AGENT_INDEX    ;
DROP TABLE IF EXISTS DOC_ANNOTATION     ;
DROP TABLE IF EXISTS DOC_DSCP           ;
DROP TABLE IF EXISTS DOC_LONGFIELD      ;
DROP TABLE IF EXISTS DOC_NUMERATION     ;
DROP TABLE IF EXISTS DOC_OTHERFIELD     ;
DROP TABLE IF EXISTS DOC_OTHERFIELD_LST ;
DROP TABLE IF EXISTS DOC_PRESENCE       ;
DROP TABLE IF EXISTS DOC_PRESENCE_NUM   ;
DROP TABLE IF EXISTS DOC_REQUEST        ;
DROP TABLE IF EXISTS DSCP_TOPIC         ;
DROP TABLE IF EXISTS EXTQUERY_BODY      ;
DROP TABLE IF EXISTS GENERAL_XML_TREE   ;
DROP TABLE IF EXISTS GENPROFILES        ;
DROP TABLE IF EXISTS GROUPAUTHORITY     ;
DROP TABLE IF EXISTS GROUPLIST          ;
DROP TABLE IF EXISTS INDEXED_FIELD      ;
DROP TABLE IF EXISTS INVENT_BOOK        ;
DROP TABLE IF EXISTS ITEM               ;
DROP TABLE IF EXISTS ITEM_ADDITION      ;
DROP TABLE IF EXISTS ITEM_OUTREASON     ;
DROP TABLE IF EXISTS JURIDICAL_PERSON   ;
DROP TABLE IF EXISTS KAT_DOC            ;
DROP TABLE IF EXISTS KNOWLEDGE_T        ;
DROP TABLE IF EXISTS LANGUAGES          ;
DROP TABLE IF EXISTS LICENCE            ;
DROP TABLE IF EXISTS LICENCE_INFO       ;
DROP TABLE IF EXISTS MARCSYS_COUNTRY    ;
DROP TABLE IF EXISTS MARCSYS_FORM       ;
DROP TABLE IF EXISTS MARCSYS_RELATOR    ;
DROP TABLE IF EXISTS MARC_DOCDESC       ;
DROP TABLE IF EXISTS MARC_DOCLEVEL      ;
DROP TABLE IF EXISTS MARC_DOCTYPE       ;
DROP TABLE IF EXISTS MASS_ACTION        ;
DROP TABLE IF EXISTS MASTER_CARDS       ;
DROP TABLE IF EXISTS MAT_AUDIO          ;
DROP TABLE IF EXISTS MAT_EL_DOC         ;
DROP TABLE IF EXISTS MAT_VIDEO          ;
DROP TABLE IF EXISTS MAXES              ;
DROP TABLE IF EXISTS MAXES2             ;
DROP TABLE IF EXISTS MISCPROFILES       ;
DROP TABLE IF EXISTS MONEY_UNIT         ;
DROP TABLE IF EXISTS NAME_LIST          ;
DROP TABLE IF EXISTS OPTIONS            ;
DROP TABLE IF EXISTS OPTIONS2           ;
DROP TABLE IF EXISTS ORDERS             ;
DROP TABLE IF EXISTS ORDER_CHAIN        ;
DROP TABLE IF EXISTS ORG_ORDER          ;
DROP TABLE IF EXISTS OUT_REASONS        ;
DROP TABLE IF EXISTS PARTY              ;
DROP TABLE IF EXISTS PARTY_COND         ;
DROP TABLE IF EXISTS PARTY_FIELDS       ;
DROP TABLE IF EXISTS PERSON_CARD        ;
DROP TABLE IF EXISTS PHYSICAL_PERSON    ;
DROP TABLE IF EXISTS PRIMARY_FIELD      ;
DROP TABLE IF EXISTS PRINT_HEADER       ;
DROP TABLE IF EXISTS PROFILELIST        ;
DROP TABLE IF EXISTS PUBLISHER_LIST     ;
DROP TABLE IF EXISTS READER_CATEGORY    ;
DROP TABLE IF EXISTS READER_PHOTO       ;
DROP TABLE IF EXISTS READER_PHOTO2      ;
DROP TABLE IF EXISTS READER_SRV_PLACE   ;
DROP TABLE IF EXISTS READER_VISIT       ;
DROP TABLE IF EXISTS REFUSE_STAT        ;
DROP TABLE IF EXISTS REFUSE_TYPES       ;
DROP TABLE IF EXISTS REF_CARD           ;
DROP TABLE IF EXISTS REF_DOC            ;
DROP TABLE IF EXISTS SERVICE_LIST       ;
DROP TABLE IF EXISTS SERVICE_PLACE      ;
DROP TABLE IF EXISTS SERVICE_TYPE       ;
DROP TABLE IF EXISTS SPECIALITY_LIST    ;
DROP TABLE IF EXISTS STOCK_LIST         ;
DROP TABLE IF EXISTS STORAGE_LIST       ;
DROP TABLE IF EXISTS SUBDIVISION_LIST   ;
DROP TABLE IF EXISTS TABLEPROFILE       ;
DROP TABLE IF EXISTS TEMPLATE_BODY      ;
DROP TABLE IF EXISTS TEMPLATE_DATASRC   ;
DROP TABLE IF EXISTS TEMPLATE_XML       ;
DROP TABLE IF EXISTS TEMPOR             ;
DROP TABLE IF EXISTS TTP                ;
DROP TABLE IF EXISTS TTPHIER_FLDORDER   ;
DROP TABLE IF EXISTS TTPHIER_OPTIONS    ;
DROP TABLE IF EXISTS TTP_FIELD          ;
DROP TABLE IF EXISTS TTP_FIELD_ENUM     ;
DROP TABLE IF EXISTS TYPE_LIST          ;
DROP TABLE IF EXISTS TYPICAL_VALUES     ;
DROP TABLE IF EXISTS USED_KOD           ;
DROP TABLE IF EXISTS USERGROUP          ;
DROP TABLE IF EXISTS USERLIST           ;
DROP TABLE IF EXISTS USERREP_AUTHORITY  ;
DROP TABLE IF EXISTS USER_REPORTS       ;
DROP TABLE IF EXISTS WINPROFILES        ;
DROP TABLE IF EXISTS WORD_INDEX         ;
DROP TABLE IF EXISTS DOCUMENT           ;
/* Table: ACC_ELDOCS, Owner: SYSADM */

CREATE TABLE ACC_ELDOCS
(
  DT_ACC TIMESTAMP,
  DOC_ID 	INTEGER,
  R_KOD	VARCHAR(50)
);

/* Table: ACQUISITION_TYPES, Owner: SYSADM */

CREATE TABLE ACQUISITION_TYPES
(
  KOD	INTEGER NOT NULL,
  NAME	VARCHAR(80)
);

/* Table: ANNOT_WORD_INDEX, Owner: SYSADM */

/*CREATE TABLE ANNOT_WORD_INDEX
(
  DOC_ID	INTEGER,
  WORD	VARCHAR(50)
);*/
CREATE TABLE ANNOT_WORD_INDEX
(
   DOC_ID INTEGER,
   WORD   VARCHAR( 50 )
   /*CONSTRAINT ANNOT_DOC_FK FOREIGN KEY ( DOC_ID ) REFERENCES DOCUMENT ( DOC_ID ) ON DELETE CASCADE*/
);

/* Table: AUTHORITYLIST, Owner: SYSADM */

CREATE TABLE AUTHORITYLIST
(
  CODE	INTEGER NOT NULL,
  NAME	VARCHAR(250) ,
  TABLELIST	VARCHAR(250) ,
  TABLELIST2	VARCHAR(250) ,
  AUTHLIST	VARCHAR(250) ,
  NORDER	INTEGER
);

/* Table: AUTHOR_LIST, Owner: SYSADM */

CREATE TABLE AUTHOR_LIST
(
  KOD	SMALLINT NOT NULL,
  NAME	VARCHAR(80)
);

/* Table: AUTHOR_MARK_LIST, Owner: SYSADM */

CREATE TABLE AUTHOR_MARK_LIST
(
  KOD	SMALLINT NOT NULL,
  NAME	VARCHAR(20) ,
  MARK_ORDER	INTEGER
);

/* Table: AUTHOR_SYNONYM, Owner: SYSADM */

CREATE TABLE AUTHOR_SYNONYM
(
  ID	INTEGER NOT NULL,
  AUTHOR	VARCHAR(50)  NOT NULL,
  NORDER	SMALLINT NOT NULL
);

/* Table: AUTHOR_WORD_INDEX, Owner: SYSADM */

/*CREATE TABLE AUTHOR_WORD_INDEX
(
  DOC_ID	INTEGER NOT NULL,
  AUTHOR	VARCHAR(50)
);*/
CREATE TABLE AUTHOR_WORD_INDEX
(
  DOC_ID	INTEGER NOT NULL,
  AUTHOR	VARCHAR(50)
  /*CONSTRAINT AUTHOR_WORD_INDEX FOREIGN KEY (DOC_ID) REFERENCES DOCUMENT (DOC_ID) ON DELETE CASCADE*/
);

/* Table: AUTH_TYPE_MAIN, Owner: SYSADM */

CREATE TABLE AUTH_TYPE_MAIN
(
  KOD	INTEGER,
  CODE	VARCHAR(1) ,
  STAT	VARCHAR(1) ,
  NAME	VARCHAR(15)
);

/* Table: BLOCKREASON_LIST, Owner: SYSADM */

CREATE TABLE BLOCKREASON_LIST
(
  KOD	SMALLINT NOT NULL,
  NAME	VARCHAR(200)
);

/* Table: CARDS, Owner: SYSADM */

CREATE TABLE CARDS
(
  CARD_ID	INTEGER NOT NULL,
  HIER_ID	INTEGER,
  STYPE	VARCHAR(1) ,
  DT_CREAT	TIMESTAMP,
  DOC_COUNT	SMALLINT,
  NAME	VARCHAR(230) ,
  TOPIC_TYPE	VARCHAR(250) ,
  SIGN	VARCHAR(250) ,
  FIRST_PART_NAME	VARCHAR(250) ,
  NEXT_PART_NAME	VARCHAR(250) ,
  FULL_INITIALS	VARCHAR(250) ,
  ADD_PART_NAME	VARCHAR(250) ,
  OTHER_PART_NAME	VARCHAR(250) ,
  TOPIC_DATES	VARCHAR(250) ,
  PLACE	VARCHAR(250) ,
  AFFILATION	VARCHAR(250) ,
  TOPIC	VARCHAR(250) ,
  GEOGRAPHICAL	VARCHAR(250) ,
  CHRONOLOGICAL	VARCHAR(250) ,
  TOPIC_FORMAT	VARCHAR(250) ,
  TOPIC_COMMENT	VARCHAR(250)
);

/* Table: CITY_LIST, Owner: SYSADM */

CREATE TABLE CITY_LIST
(
  KOD	SMALLINT NOT NULL,
  NAME	VARCHAR(80) ,
  FULLNAME	VARCHAR(80)
);

/* Table: CLIENT_FILES, Owner: SYSADM */

CREATE TABLE CLIENT_FILES
(
  FILENAME	VARCHAR(100)  NOT NULL,
  FILEBIN	BLOB /*SUB_TYPE 0 SEGMENT SIZE 80 NOT NULL*/
);

/* Table: CODE_PARSING_LIST, Owner: SYSADM */

CREATE TABLE CODE_PARSING_LIST
(
  KOD	SMALLINT NOT NULL,
  NAME	VARCHAR(48),
  SEPARATORS VARCHAR(25)
);

/* Table: CODE_PARSING_RULES, Owner: SYSADM */

CREATE TABLE CODE_PARSING_RULES
(
  PARSING_KOD	SMALLINT,
  NORDER	SMALLINT,
  MASTER_CARD	INTEGER,
  BEG_SEPARATOR	VARCHAR(5) ,
  END_SEPARATOR	VARCHAR(5)
);

/* Table: COLPROFILES, Owner: SYSADM */

CREATE TABLE COLPROFILES
(
  PROFILE_KOD	INTEGER NOT NULL,
  WIN_KOD	SMALLINT NOT NULL,
  COL_KOD	INTEGER NOT NULL,
  COL_W	DECIMAL(10, 3),
  COL_POS	SMALLINT,
  COL_HIDDEN	SMALLINT
);

/* Table: DEVICES, Owner: SYSADM */

CREATE TABLE DEVICES
(
  KOD	SMALLINT NOT NULL,
  NAME	VARCHAR(32) ,
  PATH	VARCHAR(80) ,
  SAVE_STYLE	SMALLINT
);

/* Table: DICTION_LIST, Owner: SYSADM */

CREATE TABLE DICTION_LIST
(
  KOD	SMALLINT NOT NULL,
  NAME	VARCHAR(48) ,
  NTYPE	SMALLINT,
  STATUS	SMALLINT
);

/* Table: DICTION_WORD, Owner: SYSADM */

CREATE TABLE DICTION_WORD
(
  DIC_KOD	SMALLINT NOT NULL,
  KOD	INTEGER NOT NULL,
  WORD	VARCHAR(20)
);

/* Table: DISCIPLINE, Owner: SYSADM */

CREATE TABLE DISCIPLINE
(
  ID	INTEGER NOT NULL,
  CIPHER	VARCHAR(20) ,
  NAME	VARCHAR(200) ,
  SUBNAME	VARCHAR(100) ,
  SCOMMENT	VARCHAR(250)
);

/* Table: DIVISION_LIST, Owner: SYSADM */

CREATE TABLE DIVISION_LIST
(
  KOD	SMALLINT NOT NULL,
  NAME	VARCHAR(250)
);

/* Table: DOCNAME_LIST, Owner: SYSADM */

CREATE TABLE DOCNAME_LIST
(
  KOD	SMALLINT NOT NULL,
  NAME	VARCHAR(200)
);

/* Table: DOCTYPE, Owner: SYSADM */

CREATE TABLE DOCTYPE
(
  CODE	SMALLINT NOT NULL,
  NAME	VARCHAR(250) ,
  NORDER	SMALLINT NOT NULL,
  MARCCODE	VARCHAR(3) ,
  NLEVEL	INTEGER,
  BIBTYPE	INTEGER,
  DEFAULT_CHILD_LINK	INTEGER,
  DEFAULT_CHILD_TYPE	INTEGER
);

/* Table: DOCTYPE_FIELD, Owner: SYSADM */

CREATE TABLE DOCTYPE_FIELD
(
  DOCTYPE_KOD	SMALLINT NOT NULL,
  COL_KOD	SMALLINT NOT NULL
);

/* Table: DOCUMENT, Owner: SYSADM */

CREATE TABLE DOCUMENT
(
  DOC_TYPE	SMALLINT NOT NULL,
  NAME	VARCHAR(250) ,
  DEVICE_KOD	SMALLINT,
  TYPE_KOD	SMALLINT,
  PUBLISHER	VARCHAR(100) ,
  REG_DATE	TIMESTAMP,
  PUBL_PLACE	VARCHAR(80) ,
  IN_DATE	TIMESTAMP NOT NULL,
  LONG_FILENAME	VARCHAR(250) ,
  ATTR	SMALLINT,
  DOC_ID	INTEGER /*CONSTRAINT DOCUMENT_PK PRIMARY KEY NOT*/ NULL,
  FILENAME	VARCHAR(245) ,
  AUTHOR	VARCHAR(250) ,
  IN_USER	VARCHAR(50)  NOT NULL,
  LAST_EDIT_DATE	TIMESTAMP NOT NULL,
  LAST_EDIT_USER	VARCHAR(50)  NOT NULL,
  ITEM_QTY	SMALLINT NOT NULL,
  ITEM_PRESENT	SMALLINT NOT NULL,
  UDK	VARCHAR(200) ,
  ISBN	VARCHAR(64) ,
  BBK	VARCHAR(200) ,
  AUTHOR_MARK	VARCHAR(20) ,
  ISSN	VARCHAR(32) ,
  LANG	VARCHAR(32) ,
  LANG_KOD	SMALLINT,
  CIPHER	VARCHAR(32) ,
  STATUS	VARCHAR(1) ,
  SIZEM	VARCHAR(50) ,
  ANNOT1	VARCHAR(254) ,
  ANNOT2	VARCHAR(254) ,
  ANNOT3	VARCHAR(254) ,
  ANNOT4	VARCHAR(254) ,
  CDLABEL	VARCHAR(32) ,
  TEXT_FILE	BLOB /*SUB_TYPE 0 SEGMENT SIZE 80*/,
  GROUP_KOD	INTEGER NOT NULL,
  PARENT_ID	INTEGER,
  IS_PARENT	SMALLINT,
  AUTHOR_TYPE	SMALLINT,
  NAME_PREFIX	VARCHAR(20) ,
  PUBL_YEAR	VARCHAR(50) ,
  PARENT_TYPE	INTEGER,
  FORMAT_NUM	VARCHAR(32) ,
  DEL_R_USER	VARCHAR(50) ,
  DEL_R_DATE	DATE,
  DEL_D_USER	VARCHAR(50) ,
  DEL_D_DATE	DATE,
  CONSTRAINT DOCUMENT_PK PRIMARY KEY (DOC_ID)
);

/* Table: DOCXFIELD_LIST, Owner: SYSADM */

CREATE TABLE DOCXFIELD_LIST
(
  KOD	SMALLINT NOT NULL,
  NAME	VARCHAR(250)  NOT NULL,
  STYPE	VARCHAR(10)  NOT NULL,
  NLENGTH	SMALLINT,
  SCALE	SMALLINT,
  SUPERFIELD	SMALLINT,
  USEINQUERY	SMALLINT,
  USEINSORT	SMALLINT,
  USEINLIST	SMALLINT,
  NORDER	SMALLINT,
  MARCTAG	VARCHAR(3) ,
  MARC_SUBFIELD	VARCHAR(1) ,
  MARCPOS_START	SMALLINT,
  MARCPOS_END	SMALLINT,
  MARC_MULTIPLE	VARCHAR(1) ,
  MARC_CODETBL	VARCHAR(18) ,
  ALLOWTEXTEDIT	SMALLINT,
  MARC_INDICATORS	VARCHAR(2) ,
  MARC_ADDFIELD	VARCHAR(80) ,
  SHORT_NAME	VARCHAR(100) ,
  SEPARATORS	VARCHAR(5) ,
  AREA	SMALLINT,
  NNO	SMALLINT,
  END_SEPARATOR	VARCHAR(5) ,
  UNIMARCTAG	VARCHAR(3) ,
  UNIMARC_SUBFIELD	VARCHAR(1) ,
  UNIMARCPOS_START	SMALLINT,
  UNIMARCPOS_END	SMALLINT,
  UNIMARC_INDICATORS	VARCHAR(2) ,
  UNIMARC_ADDFIELD	VARCHAR(80) ,
  UNIMARC_MULTIPLE	VARCHAR(1) ,
  UNIMARC_CODETBL	VARCHAR(18) ,
  UNIALLOWTEXTEDIT	SMALLINT,
  AUTHOR_LEVEL	SMALLINT,
  COLNAME	VARCHAR(18)
);

/* Table: DOCXFIELD_VALUE, Owner: SYSADM */

/*CREATE TABLE DOCXFIELD_VALUE
(
  DOC_ID	INTEGER NOT NULL,
  COL002	VARCHAR(100) ,
  COL003	VARCHAR(50) ,
  COL004	VARCHAR(20) ,
  COL006	VARCHAR(32) ,
  COL007	VARCHAR(32) ,
  COL008	VARCHAR(64) ,
  COL010	VARCHAR(80) ,
  COL011	VARCHAR(32) ,
  COL012	VARCHAR(80) ,
  COL013	VARCHAR(32) ,
  COL014	VARCHAR(128) ,
  COL016	VARCHAR(250) ,
  COL017	VARCHAR(200) ,
  COL018	VARCHAR(20) ,
  COL019	VARCHAR(200) ,
  COL020	VARCHAR(20) ,
  COL021	VARCHAR(200) ,
  COL022	DATE,
  COL023	DATE,
  COL024	VARCHAR(250) ,
  COL025	VARCHAR(250) ,
  COL026	VARCHAR(64) ,
  COL027	VARCHAR(64) ,
  COL028	VARCHAR(50) ,
  COL029	VARCHAR(250) ,
  COL030	VARCHAR(250) ,
  COL031	VARCHAR(64) ,
  COL033	VARCHAR(32) ,
  COL035	INTEGER,
  COL036	INTEGER,
  COL037	VARCHAR(50) ,
  COL038	VARCHAR(250) ,
  COL039	VARCHAR(100) ,
  COL040	VARCHAR(100) ,
  COL041	INTEGER,
  COL043	VARCHAR(50) ,
  COL044	VARCHAR(250) ,
  COL045	VARCHAR(3) ,
  COL046	VARCHAR(50) ,
  COL047	VARCHAR(50) ,
  COL048	VARCHAR(150) ,
  COL049	VARCHAR(25) ,
  COL051	VARCHAR(200) ,
  COL052	VARCHAR(20) ,
  COL054	VARCHAR(20) ,
  COL055	VARCHAR(20) ,
  COL056	VARCHAR(20) ,
  COL057	VARCHAR(100) ,
  COL059	VARCHAR(10) ,
  COL060	VARCHAR(10) ,
  COL061	VARCHAR(10) ,
  COL062	VARCHAR(50) ,
  COL064	VARCHAR(200) ,
  COL065	VARCHAR(40) ,
  COL067	VARCHAR(40) ,
  COL068	VARCHAR(20) ,
  COL069	VARCHAR(100) ,
  COL070	VARCHAR(100) ,
  COL072	VARCHAR(200) ,
  COL073	VARCHAR(200) ,
  COL074	VARCHAR(200) ,
  COL075	VARCHAR(200) ,
  COL077	VARCHAR(10) ,
  COL078	VARCHAR(3) ,
  COL079	VARCHAR(1) ,
  COL080	VARCHAR(10) ,
  COL081	VARCHAR(40) ,
  COL082	VARCHAR(100) ,
  COL083	VARCHAR(20) ,
  COL084	VARCHAR(70) ,
  COL086	VARCHAR(200) ,
  COL087	VARCHAR(250) ,
  COL088	VARCHAR(250) ,
  COL089	VARCHAR(25) ,
  COL090	VARCHAR(200) ,
  COL091	VARCHAR(250) ,
  COL092	VARCHAR(250) ,
  COL093	VARCHAR(25) ,
  COL094	VARCHAR(250) ,
  COL095	VARCHAR(30) ,
  COL097	VARCHAR(3) ,
  COL098	VARCHAR(200) ,
  COL099	VARCHAR(250) ,
  COL101	VARCHAR(1) ,
  COL102	VARCHAR(1) ,
  COL103	VARCHAR(1) ,
  COL104	VARCHAR(1)
);*/
CREATE TABLE DOCXFIELD_VALUE
(
  DOC_ID	INTEGER NOT NULL,
  COL002	VARCHAR(100) ,
  COL003	VARCHAR(50) ,
  COL004	VARCHAR(20) ,
  COL006	VARCHAR(32) ,
  COL007	VARCHAR(32) ,
  COL008	VARCHAR(64) ,
  COL010	VARCHAR(80) ,
  COL011	VARCHAR(32) ,
  COL012	VARCHAR(80) ,
  COL013	VARCHAR(32) ,
  COL014	VARCHAR(128) ,
  COL016	VARCHAR(250) ,
  COL017	VARCHAR(200) ,
  COL018	VARCHAR(20) ,
  COL019	VARCHAR(200) ,
  COL020	VARCHAR(20) ,
  COL021	VARCHAR(200) ,
  COL022	DATE,
  COL023	DATE,
  COL024	VARCHAR(250) ,
  COL025	VARCHAR(250) ,
  COL026	VARCHAR(64) ,
  COL027	VARCHAR(64) ,
  COL028	VARCHAR(50) ,
  COL029	VARCHAR(250) ,
  COL030	VARCHAR(250) ,
  COL031	VARCHAR(64) ,
  COL033	VARCHAR(32) ,
  COL035	INTEGER,
  COL036	INTEGER,
  COL037	VARCHAR(50) ,
  COL038	VARCHAR(250) ,
  COL039	VARCHAR(100) ,
  COL040	VARCHAR(100) ,
  COL041	INTEGER,
  COL043	VARCHAR(50) ,
  COL044	VARCHAR(250) ,
  COL045	VARCHAR(3) ,
  COL046	VARCHAR(50) ,
  COL047	VARCHAR(50) ,
  COL048	VARCHAR(150) ,
  COL049	VARCHAR(25) ,
  COL051	VARCHAR(200) ,
  COL052	VARCHAR(20) ,
  COL054	VARCHAR(20) ,
  COL055	VARCHAR(20) ,
  COL056	VARCHAR(20) ,
  COL057	VARCHAR(100) ,
  COL059	VARCHAR(10) ,
  COL060	VARCHAR(10) ,
  COL061	VARCHAR(10) ,
  COL062	VARCHAR(50) ,
  COL064	VARCHAR(200) ,
  COL065	VARCHAR(40) ,
  COL067	VARCHAR(40) ,
  COL068	VARCHAR(20) ,
  COL069	VARCHAR(100) ,
  COL070	VARCHAR(100) ,
  COL072	VARCHAR(200) ,
  COL073	VARCHAR(200) ,
  COL074	VARCHAR(200) ,
  COL075	VARCHAR(200) ,
  COL077	VARCHAR(10) ,
  COL078	VARCHAR(3) ,
  COL079	VARCHAR(1) ,
  COL080	VARCHAR(10) ,
  COL081	VARCHAR(40) ,
  COL082	VARCHAR(100) ,
  COL083	VARCHAR(20) ,
  COL084	VARCHAR(70) ,
  COL086	VARCHAR(200) ,
  COL087	VARCHAR(250) ,
  COL088	VARCHAR(250) ,
  COL089	VARCHAR(25) ,
  COL090	VARCHAR(200) ,
  COL091	VARCHAR(250) ,
  COL092	VARCHAR(250) ,
  COL093	VARCHAR(25) ,
  COL094	VARCHAR(250) ,
  COL095	VARCHAR(30) ,
  COL097	VARCHAR(3) ,
  COL098	VARCHAR(200) ,
  COL099	VARCHAR(250) ,
  COL101	VARCHAR(1) ,
  COL102	VARCHAR(1) ,
  COL103	VARCHAR(1) ,
  COL104	VARCHAR(1)
  /*CONSTRAINT DOCXFIELD_VALUE_FK FOREIGN KEY (DOC_ID) REFERENCES DOCUMENT (DOC_ID) ON DELETE CASCADE*/
);

/* Table: DOC_AGENT_INDEX, Owner: SYSADM */

CREATE TABLE DOC_AGENT_INDEX
(
  DOC_ID	INTEGER,
  RECORD_HEADER	VARCHAR(200)
);

/* Table: DOC_ANNOTATION, Owner: SYSADM */

CREATE TABLE DOC_ANNOTATION
(
  DOC_ID	INTEGER,
  NORDER	SMALLINT,
  FRAGMENT	VARCHAR(251)
);

/* Table: DOC_DSCP, Owner: SYSADM */

CREATE TABLE DOC_DSCP
(
  DOC_ID	INTEGER,
  DSCP_ID	INTEGER
);

/* Table: DOC_ITEM, Owner: SYSADM */

/*CREATE TABLE DOC_ITEM
(
  DOC_ID	INTEGER NOT NULL,
  ITEM_ID	INTEGER NOT NULL,
  ITEM_NO	VARCHAR(32) ,
  REG_DATE	TIMESTAMP,
  COMMENTT	VARCHAR(128) ,
  STATUS	VARCHAR(1) ,
  DELIVERED	SMALLINT,
  DEVICE_KOD	SMALLINT,
  PARTY_KOD	INTEGER,
  PARTY_NO	VARCHAR(15) ,
  ACT_KOD	INTEGER,
  ACT_NO	VARCHAR(10) ,
  OUT_REASON	SMALLINT,
  QTYALL	SMALLINT,
  QTYACT	SMALLINT,
  PRICE	DECIMAL(10, 2),
  PRICE_UNIT	SMALLINT,
  STOCK_KOD	SMALLINT,
  NOBALANCE	SMALLINT,
  ITEM_NUMBER	VARCHAR(20) ,
  ITEM_INTNO	INTEGER,
  ITEM_MAINNO	VARCHAR(32) ,
  DEVICE_DATE	TIMESTAMP,
  DEVICE_USER	VARCHAR(30) ,
  DEVICE_PREV	INTEGER,
  LAST_EDIT_DATE	TIMESTAMP,
  LAST_EDIT_USER	VARCHAR(30) ,
  DISTRIBUTION_KOD	SMALLINT,
  RFID	VARCHAR(32) ,
  BARCODE	VARCHAR(32)
);*/
CREATE TABLE DOC_ITEM
(
  DOC_ID	INTEGER NOT NULL,
  ITEM_ID	INTEGER NOT NULL,
  ITEM_NO	VARCHAR(32) ,
  REG_DATE	TIMESTAMP,
  COMMENTT	VARCHAR(128) ,
  STATUS	VARCHAR(1) ,
  DELIVERED	SMALLINT,
  DEVICE_KOD	SMALLINT,
  PARTY_KOD	INTEGER,
  PARTY_NO	VARCHAR(15) ,
  ACT_KOD	INTEGER,
  ACT_NO	VARCHAR(10) ,
  OUT_REASON	SMALLINT,
  QTYALL	SMALLINT,
  QTYACT	SMALLINT,
  PRICE	DECIMAL(10, 2),
  PRICE_UNIT	SMALLINT,
  STOCK_KOD	SMALLINT,
  NOBALANCE	SMALLINT,
  ITEM_NUMBER	VARCHAR(20) ,
  ITEM_INTNO	INTEGER,
  ITEM_MAINNO	VARCHAR(32) ,
  DEVICE_DATE	TIMESTAMP,
  DEVICE_USER	VARCHAR(30) ,
  DEVICE_PREV	INTEGER,
  LAST_EDIT_DATE	TIMESTAMP,
  LAST_EDIT_USER	VARCHAR(30) ,
  DISTRIBUTION_KOD	SMALLINT,
  RFID	VARCHAR(32) ,
  BARCODE	VARCHAR(32)
  /*CONSTRAINT DOC_ITEM_FK1 FOREIGN KEY (DOC_ID) REFERENCES DOCUMENT (DOC_ID) ON DELETE CASCADE*/
);


/* Table: DOC_LONGFIELD, Owner: SYSADM */

CREATE TABLE DOC_LONGFIELD
(
  ID	INTEGER NOT NULL,
  FLD_TYPE	SMALLINT NOT NULL,
  NORDER	INTEGER NOT NULL,
  FRAGMENT01	VARCHAR(250) ,
  FRAGMENT02	VARCHAR(250) ,
  FRAGMENT03	VARCHAR(250) ,
  FRAGMENT04	VARCHAR(250) ,
  FRAGMENT05	VARCHAR(250) ,
  FRAGMENT06	VARCHAR(250) ,
  FRAGMENT07	VARCHAR(250) ,
  FRAGMENT08	VARCHAR(250)
);

/* Table: DOC_NUMERATION, Owner: SYSADM */

CREATE TABLE DOC_NUMERATION
(
  DOC_ID	INTEGER NOT NULL,
  NUMERATION	BLOB /*SUB_TYPE 0 SEGMENT SIZE 80*/
);

/* Table: DOC_OTHERFIELD, Owner: SYSADM */

/*CREATE TABLE DOC_OTHERFIELD
(
  DOC_ID	INTEGER NOT NULL,
  FIELDS	BLOB /*SUB_TYPE 0 SEGMENT SIZE 80*/
/*);*/
CREATE TABLE DOC_OTHERFIELD
(
  DOC_ID	INTEGER NOT NULL,
  FIELDS	BLOB /*SUB_TYPE 0 SEGMENT SIZE 80*/
  /*CONSTRAINT DOC_OTHERFIELD_FK FOREIGN KEY (DOC_ID) REFERENCES DOCUMENT (DOC_ID) ON DELETE CASCADE*/
);

/* Table: DOC_OTHERFIELD_LST, Owner: SYSADM */

CREATE TABLE DOC_OTHERFIELD_LST
(
  KOD	SMALLINT NOT NULL,
  NAME	VARCHAR(64) ,
  USMARC_TAG	VARCHAR(10) ,
  UNIMARC_TAG	VARCHAR(10) ,
  COMMENTT	VARCHAR(100) ,
  USMARC_IND	CHAR(2) ,
  UNIMARC_IND	CHAR(2)
);

/* Table: DOC_PRESENCE, Owner: SYSADM */

CREATE TABLE DOC_PRESENCE
(
  DOC_ID	INTEGER NOT NULL,
  DOC_OWNER	VARCHAR(32)  NOT NULL,
  SCOMMENT	VARCHAR(250) ,
  ACTUAL_DATE	TIMESTAMP,
  NUMERATION	BLOB /*SUB_TYPE 0 SEGMENT SIZE 80*/,
  ITEM_QTY	INTEGER,
  STOCK_ITEM_QTY	INTEGER,
  PRICE	DECIMAL(10, 2)
);

/* Table: DOC_PRESENCE_NUM, Owner: SYSADM */

CREATE TABLE DOC_PRESENCE_NUM
(
  DOC_ID	INTEGER NOT NULL,
  DOC_OWNER	VARCHAR(32)  NOT NULL,
  NORDER	INTEGER NOT NULL,
  FRAGMENT01	VARCHAR(250) ,
  FRAGMENT02	VARCHAR(250) ,
  FRAGMENT03	VARCHAR(250) ,
  FRAGMENT04	VARCHAR(250) ,
  FRAGMENT05	VARCHAR(250) ,
  FRAGMENT06	VARCHAR(250) ,
  FRAGMENT07	VARCHAR(250) ,
  FRAGMENT08	VARCHAR(250)
);

/* Table: DOC_REQUEST, Owner: SYSADM */

/*CREATE TABLE DOC_REQUEST
(
  ID	INTEGER NOT NULL,
  DOC_ID	INTEGER,
  DATE_REQ	TIMESTAMP,
  ORDER_NAME	VARCHAR(64) ,
  QTY	SMALLINT,
  PRIORITY_NO	SMALLINT,
  REQ_STATUS	SMALLINT,
  COMMENTT	VARCHAR(100) ,
  DIVISION_KOD	SMALLINT,
  SUBDIVISION_KOD	SMALLINT,
  SPECIALITY_KOD	SMALLINT,
  ACCEPTED	INTEGER,
  DEVICE_KOD	INTEGER,
  DSCP_ID	INTEGER
);*/
CREATE TABLE DOC_REQUEST
(
  ID	INTEGER NOT NULL,
  DOC_ID	INTEGER,
  DATE_REQ	TIMESTAMP,
  ORDER_NAME	VARCHAR(64) ,
  QTY	SMALLINT,
  PRIORITY_NO	SMALLINT,
  REQ_STATUS	SMALLINT,
  COMMENTT	VARCHAR(100) ,
  DIVISION_KOD	SMALLINT,
  SUBDIVISION_KOD	SMALLINT,
  SPECIALITY_KOD	SMALLINT,
  ACCEPTED	INTEGER,
  DEVICE_KOD	INTEGER,
  DSCP_ID	INTEGER
  /*CONSTRAINT DOC_REQUEST_FK FOREIGN KEY (DOC_ID) REFERENCES DOCUMENT (DOC_ID) ON DELETE CASCADE*/
);

/* Table: DSCP_TOPIC, Owner: SYSADM */

CREATE TABLE DSCP_TOPIC
(
  DSCP_ID	INTEGER NOT NULL,
  TOPIC_TYPE	VARCHAR(3) ,
  TOPIC_VALUE	VARCHAR(20)
);

/* Table: EXTQUERY_BODY, Owner: SYSADM */

CREATE TABLE EXTQUERY_BODY
(
  ID	INTEGER NOT NULL,
  FLD_TYPE	SMALLINT NOT NULL,
  NORDER	INTEGER NOT NULL,
  FRAGMENT01	VARCHAR(250) ,
  FRAGMENT02	VARCHAR(250) ,
  FRAGMENT03	VARCHAR(250) ,
  FRAGMENT04	VARCHAR(250) ,
  FRAGMENT05	VARCHAR(250) ,
  FRAGMENT06	VARCHAR(250) ,
  FRAGMENT07	VARCHAR(250) ,
  FRAGMENT08	VARCHAR(250)
);

/* Table: GENERAL_XML_TREE, Owner: SYSADM */

CREATE TABLE GENERAL_XML_TREE
(
  TREE_ID	VARCHAR(50) ,
  NODE_LEVEL	SMALLINT,
  IS_ATTRIBUTE	SMALLINT,
  NODE_NAME	VARCHAR(250) ,
  NODE_VALUE	VARCHAR(250) ,
  PART_NUMBER	SMALLINT,
  SUFFIX_SIZE	SMALLINT,
  NODE_ORDER	SMALLINT
);

/* Table: GENPROFILES, Owner: SYSADM */

CREATE TABLE GENPROFILES
(
  SUSER_NAME	VARCHAR(50) ,
  SECTION_NAME	VARCHAR(40) ,
  ITEM_NAME	VARCHAR(40) ,
  SVALUE	VARCHAR(250)
);

/* Table: GROUPAUTHORITY, Owner: SYSADM */

CREATE TABLE GROUPAUTHORITY
(
  GROUPCODE	INTEGER NOT NULL,
  AUTHCODE	INTEGER NOT NULL
);

/* Table: GROUPLIST, Owner: SYSADM */

CREATE TABLE GROUPLIST
(
  CODE	INTEGER NOT NULL,
  NAME	VARCHAR(250)
);

/* Table: INDEXED_FIELD, Owner: SYSADM */

CREATE TABLE INDEXED_FIELD
(
  KOD	SMALLINT NOT NULL,
  NTYPE	SMALLINT
);

/* Table: INVENT_BOOK, Owner: SYSADM */

CREATE TABLE INVENT_BOOK
(
  KOD	SMALLINT NOT NULL,
  NAME	VARCHAR(32) ,
  ITEM_SORT_LIST	VARCHAR(64) ,
  DOCTYPE_LIST	VARCHAR(64) ,
  FLAGS	INTEGER,
  NO_FROM	INTEGER,
  NO_TO	INTEGER,
  DATE_FROM	TIMESTAMP,
  DATE_TO	TIMESTAMP,
  NO_PREFIX	VARCHAR(10) ,
  CUR_NO	INTEGER,
  NO_LENGTH	SMALLINT,
  NO_SUFFIX	VARCHAR(10)
);

/* Table: ITEM, Owner: SYSADM */

CREATE TABLE ITEM
(
  ITEM_INTNO	INTEGER NOT NULL,
  DOC_ID	INTEGER NOT NULL,
  USER_NAME	VARCHAR(50)  NOT NULL,
  STATUS	VARCHAR(1) ,
  INV_DATE	TIMESTAMP NOT NULL,
  IP	VARCHAR(25)  NOT NULL,
 PRIMARY KEY (ITEM_INTNO)
);

/* Table: ITEM_ADDITION, Owner: SYSADM */

CREATE TABLE ITEM_ADDITION
(
  DOC_ID	INTEGER NOT NULL,
  DEVICE_KOD	INTEGER,
  ONCREATE_QTY	INTEGER,
  ACCEPTED_QTY	INTEGER,
  LAST_EDIT_DATE	TIMESTAMP,
  LAST_EDIT_USER	VARCHAR(50) ,
  PASS_QTY	INTEGER
);

/* Table: ITEM_OUTREASON, Owner: SYSADM */

CREATE TABLE ITEM_OUTREASON
(
  ID	INTEGER,
  ITEM_ID	INTEGER,
  OUT_REASON	SMALLINT,
  OUT_QTY	SMALLINT,
  ACT_KOD	INTEGER,
  ACT_NO	VARCHAR(10) ,
  STATUS	VARCHAR(1)
);

/* Table: JURIDICAL_PERSON, Owner: SYSADM */

CREATE TABLE JURIDICAL_PERSON
(
  ID	INTEGER NOT NULL,
  PHONE1	VARCHAR(32) ,
  KOD	INTEGER,
  NAME	VARCHAR(254) ,
  PHONE2	VARCHAR(32) ,
  FAX	VARCHAR(32) ,
  ADDRESS	VARCHAR(64) ,
  CHIEF_NAME	VARCHAR(32) ,
  CHIEF_POST	VARCHAR(32) ,
  CODE	VARCHAR(32) ,
  STATUS	VARCHAR(1) ,
  IN_USER	VARCHAR(50) ,
  EMAIL	VARCHAR(80) ,
  SUPPLIER	VARCHAR(1) ,
  IN_DATE	TIMESTAMP,
  LAST_EDIT_DATE	TIMESTAMP,
  LAST_EDIT_USER	VARCHAR(50) ,
  ISPARTNER	INTEGER,
  ISCOMPOSITE	INTEGER,
  URL	VARCHAR(200)
);

/* Table: KAT_DOC, Owner: SYSADM */

CREATE TABLE KAT_DOC
(
  KOD	SMALLINT NOT NULL,
  CODE	VARCHAR(1) ,
  NAME	VARCHAR(48) ,
  STAT	VARCHAR(1)
);

/* Table: KNOWLEDGE_T, Owner: SYSADM */

CREATE TABLE KNOWLEDGE_T
(
  KOD	INTEGER,
  NAME	VARCHAR(150) ,
  CODE	VARCHAR(3) ,
  STAT	VARCHAR(1)
);

/* Table: LANGUAGES, Owner: SYSADM */

CREATE TABLE LANGUAGES
(
  KOD	SMALLINT NOT NULL,
  NAME	VARCHAR(32) ,
  CODE	VARCHAR(3) ,
  STAT	VARCHAR(1) ,
  USED	SMALLINT
);

/* Table: LICENCE, Owner: SYSADM */

CREATE TABLE LICENCE
(
  LICENCENO	VARCHAR(50)  NOT NULL,
  USERQTY	SMALLINT NOT NULL,
  MAXDATE	TIMESTAMP
);

/* Table: LICENCE_INFO, Owner: SYSADM */

CREATE TABLE LICENCE_INFO
(
  LICENCE_TYPE	VARCHAR(100) ,
  LICENCE_NO	VARCHAR(200) ,
  USER_QTY	INTEGER,
  MAX_DATE	DATE
);

/* Table: MARCSYS_COUNTRY, Owner: SYSADM */

CREATE TABLE MARCSYS_COUNTRY
(
  KOD	SMALLINT NOT NULL,
  CODE	VARCHAR(5) ,
  NAME	VARCHAR(60) ,
  STAT	VARCHAR(1) ,
  USED	SMALLINT
);

/* Table: MARCSYS_FORM, Owner: SYSADM */

CREATE TABLE MARCSYS_FORM
(
  KOD	SMALLINT NOT NULL,
  CODE	VARCHAR(1) ,
  NAME	VARCHAR(48) ,
  STAT	VARCHAR(1) ,
  UNIMARC_CODE	CHAR(1)
);

/* Table: MARCSYS_RELATOR, Owner: SYSADM */

CREATE TABLE MARCSYS_RELATOR
(
  CODE	VARCHAR(3) ,
  NAME	VARCHAR(32) ,
  STAT	VARCHAR(1)
);

/* Table: MARC_DOCDESC, Owner: SYSADM */

CREATE TABLE MARC_DOCDESC
(
  CODE	VARCHAR(1) ,
  NAME	VARCHAR(32)
);

/* Table: MARC_DOCLEVEL, Owner: SYSADM */

CREATE TABLE MARC_DOCLEVEL
(
  CODE	VARCHAR(1) ,
  NAME	VARCHAR(32) ,
  UNIMARC_CODE	CHAR(1)
);

/* Table: MARC_DOCTYPE, Owner: SYSADM */

CREATE TABLE MARC_DOCTYPE
(
  CODE	CHAR(1) ,
  NAME	VARCHAR(48) ,
  UNIMARC_CODE	CHAR(1)
);

/* Table: MASS_ACTION, Owner: SYSADM */

CREATE TABLE MASS_ACTION
(
  ACTION_ID	INTEGER,
  NAME	VARCHAR(250) ,
  ORGANISATION	VARCHAR(250) ,
  DEPARTMENT	VARCHAR(250) ,
  ACTION_DATE	DATE,
  PLACE	VARCHAR(250) ,
  QTY	INTEGER,
  ACTION_RESULT	VARCHAR(250) ,
  ACTION_COMMENT	VARCHAR(250) ,
  IN_USER	VARCHAR(50)
);

/* Table: MASTER_CARDS, Owner: SYSADM */

CREATE TABLE MASTER_CARDS
(
  MASTER_ID	INTEGER,
  GROUP_KOD	INTEGER,
  HIER_ID	INTEGER,
  ACCESS_TYPE	SMALLINT,
  HIER_TYPE	SMALLINT
);

/* Table: MAT_AUDIO, Owner: SYSADM */

CREATE TABLE MAT_AUDIO
(
  KOD	SMALLINT NOT NULL,
  CODE	VARCHAR(1) ,
  NAME	VARCHAR(48) ,
  STAT	VARCHAR(1)
);

/* Table: MAT_EL_DOC, Owner: SYSADM */

CREATE TABLE MAT_EL_DOC
(
  KOD	SMALLINT NOT NULL,
  CODE	VARCHAR(1) ,
  NAME	VARCHAR(48) ,
  STAT	VARCHAR(1)
);

/* Table: MAT_VIDEO, Owner: SYSADM */

CREATE TABLE MAT_VIDEO
(
  KOD	SMALLINT NOT NULL,
  CODE	VARCHAR(1) ,
  NAME	VARCHAR(48) ,
  STAT	VARCHAR(1)
);

/* Table: MAXES, Owner: SYSADM */

CREATE TABLE MAXES
(
  JUR_PERSON_ID	INTEGER,
  PHYS_PERSON_ID	INTEGER,
  DOC_ID	INTEGER,
  CARD_ID	INTEGER,
  ITEM_ID	INTEGER,
  COLCNT	INTEGER,
  GRPCNT	INTEGER,
  PARTY_KOD	INTEGER,
  REQUEST_ID	INTEGER,
  ORG_ORDER_ID	INTEGER,
  ITEM_OUTREASON_ID	INTEGER,
  DELIVER_ID	INTEGER,
  PROFILE_KOD	INTEGER
);

/* Table: MAXES2, Owner: SYSADM */

CREATE TABLE MAXES2
(
  CODE	VARCHAR(20)  NOT NULL,
  MAX_VALUE	INTEGER NOT NULL
);

/* Table: MISCPROFILES, Owner: SYSADM */

CREATE TABLE MISCPROFILES
(
  PROFILE_KOD	INTEGER,
  WIN_KOD	SMALLINT,
  ITEM_NAME	VARCHAR(50) ,
  SVALUE	VARCHAR(250)
);

/* Table: MONEY_UNIT, Owner: SYSADM */

CREATE TABLE MONEY_UNIT
(
  KOD	SMALLINT NOT NULL,
  SHORT_NAME	VARCHAR(10) ,
  NAME	VARCHAR(32) ,
  CENT_SHORT_NAME	VARCHAR(10) ,
  CENT_NAME	VARCHAR(32)
);

/* Table: NAME_LIST, Owner: SYSADM */

CREATE TABLE NAME_LIST
(
  KOD	SMALLINT NOT NULL,
  NTYPE	SMALLINT,
  PERSON_POST	VARCHAR(250) ,
  NAME	VARCHAR(64)
);

/* Table: OPTIONS, Owner: SYSADM */

CREATE TABLE OPTIONS
(
  TERM_DAYS	SMALLINT,
  TERM_DAYS_JUR	SMALLINT,
  DBVERSION	SMALLINT,
  AM_SHORT	SMALLINT,
  DEF_UNIT	SMALLINT,
  UPD	SMALLINT,
  ITEMS_NO_INTEGER	SMALLINT,
  MONEY_NAME	VARCHAR(10) ,
  CENT_NAME	VARCHAR(10) ,
  ITEMS_DASHED	SMALLINT,
  ITEMS_UNIQUE	SMALLINT,
  UDK_HIER	INTEGER,
  UDK_SEPARATOR	VARCHAR(2) ,
  LIBCIPHER	VARCHAR(32) ,
  LIBNAME	VARCHAR(254) ,
  USE_PRESENCE_IMP	SMALLINT,
  USE_PRESENCE_EXP	SMALLINT,
  ITEMNO_SEPARATOR	CHAR(20) ,
  FORMULAR_TEXT	VARCHAR(250) ,
  MAX_RESULTSET	INTEGER,
  CLNT_VER	INTEGER,
  CLNT_RED	INTEGER,
  CLNT_MOD	INTEGER,
  CHECK_RET_PLACE	INTEGER,
  USE_PARTYNO	SMALLINT,
  DIVISION_COLNAME	VARCHAR(30) ,
  SUBDIV_COLNAME	VARCHAR(30) ,
  DSCP_NAME	VARCHAR(250) ,
  EXCHANGE_FOND	INTEGER,
  CONFIRM_GETTING	INTEGER,
  ORDER_TO_QUEUE	SMALLINT,
  MIN_CLNT_VER	INTEGER,
  MIN_CLNT_RED	INTEGER,
  MIN_CLNT_MOD	INTEGER,
  CONFIRM_DOCGETTING	INTEGER,
  SUMMARY_START_DATE	DATE,
  CONFIRM_DOCORDER	SMALLINT
);

/* Table: OPTIONS2, Owner: SYSADM */

CREATE TABLE OPTIONS2
(
  OPTION_ID	VARCHAR(100) ,
  OPTION_VALUE	VARCHAR(250)
);

/* Table: ORDERS, Owner: SYSADM */

CREATE TABLE ORDERS
(
  PERSON_ID	INTEGER,
  PERSON_TYPE	VARCHAR(1) ,
  DOC_ID	INTEGER,
  STATUS	SMALLINT,
  ITEM_ID	INTEGER,
  ITEM_NO	VARCHAR(32) ,
  PLACE_DATE	TIMESTAMP,
  DEVICE_KOD	SMALLINT,
  DELIVER_KOD	SMALLINT,
  LAST_EDIT_USER	VARCHAR(50)
);

/* Table: ORDER_CHAIN, Owner: SYSADM */

/*CREATE TABLE ORDER_CHAIN
(
  DELIVER_KOD	SMALLINT,
  NORDER	SMALLINT,
  DEVICE_KOD	SMALLINT
);*/
CREATE TABLE ORDER_CHAIN
(
  DELIVER_KOD	SMALLINT,
  NORDER	SMALLINT,
  DEVICE_KOD	SMALLINT
  /*CONSTRAINT ORG_ORDER_FK FOREIGN KEY (DELIVER_KOD) REFERENCES STORAGE_LIST (KOD) ON DELETE CASCADE*/
);

/* Table: ORG_ORDER, Owner: SYSADM */

/*CREATE TABLE ORG_ORDER
(
  ID	INTEGER NOT NULL,
  DOC_ID	INTEGER,
  QTY	SMALLINT,
  ORG_ID	INTEGER,
  DATE_PLACE	TIMESTAMP,
  DATE_MUST	TIMESTAMP,
  DATE_RECEIVE	TIMESTAMP,
  COMMENTT	VARCHAR(200) ,
  ORD_STATUS	SMALLINT
);*/
CREATE TABLE ORG_ORDER
(
  ID	INTEGER NOT NULL,
  DOC_ID	INTEGER,
  QTY	SMALLINT,
  ORG_ID	INTEGER,
  DATE_PLACE	TIMESTAMP,
  DATE_MUST	TIMESTAMP,
  DATE_RECEIVE	TIMESTAMP,
  COMMENTT	VARCHAR(200) ,
  ORD_STATUS	SMALLINT
  /*CONSTRAINT ORG_ORDER_FK FOREIGN KEY (DOC_ID) REFERENCES DOCUMENT (DOC_ID) ON DELETE CASCADE*/
);

/* Table: OUT_REASONS, Owner: SYSADM */

CREATE TABLE OUT_REASONS
(
  KOD	SMALLINT NOT NULL,
  NAME	VARCHAR(32) ,
  PAR_KOD	SMALLINT,
  NORDER	SMALLINT
);

/* Table: PARTY, Owner: SYSADM */

CREATE TABLE PARTY
(
  KOD	INTEGER NOT NULL,
  PARTY_NO	VARCHAR(10) ,
  IN_DATE	TIMESTAMP,
  STYPE	CHAR(1) ,
  SOURCE_ID	INTEGER,
  SOURCE_NAME	VARCHAR(254) ,
  ACCOMPANY_DOC_DATE	TIMESTAMP,
  ACCOMPANY_DOC_NO	VARCHAR(20) ,
  COMMNT	VARCHAR(250) ,
  DIRECTOR_POST	VARCHAR(250) ,
  DIRECTOR_NAME	VARCHAR(64) ,
  SIGNER1_POST	VARCHAR(250) ,
  SIGNER1_NAME	VARCHAR(64) ,
  SIGNER2_POST	VARCHAR(250) ,
  SIGNER2_NAME	VARCHAR(64) ,
  SIGNER3_POST	VARCHAR(250) ,
  SIGNER3_NAME	VARCHAR(64) ,
  FULL_TEXT	VARCHAR(250) ,
  LAST_EDIT_DATE	TIMESTAMP,
  LAST_EDIT_USER	VARCHAR(30) ,
  WRITEOFF_PERSON	VARCHAR(100) ,
  ACQUISITION_TYPE	INTEGER,
  OUT_REASON	INTEGER,
  COL202	INTEGER,
  COL203	INTEGER,
  COL206	INTEGER,
  COL207	DECIMAL(15, 2),
  COL208	INTEGER,
  COL209	INTEGER,
  COL211	INTEGER,
  COL212	INTEGER,
  COL213	INTEGER,
  COL214	INTEGER,
  COL215	INTEGER,
  COL216	INTEGER,
  COL217	INTEGER,
  COL218	INTEGER,
  COL220	INTEGER,
  COL221	INTEGER,
  COL222	INTEGER,
  COL224	INTEGER,
  COL225	INTEGER,
  SIGNER4_NAME	VARCHAR(64) ,
  SIGNER4_POST	VARCHAR(250) ,
  SIGNER5_NAME	VARCHAR(64) ,
  SIGNER5_POST	VARCHAR(250) ,
  SIGNER6_NAME	VARCHAR(64) ,
  SIGNER6_POST	VARCHAR(250) ,
  SIGNER7_NAME	VARCHAR(64) ,
  SIGNER7_POST	VARCHAR(250) ,
  SIGNER8_NAME	VARCHAR(64) ,
  SIGNER8_POST	VARCHAR(250) ,
  SIGNER9_NAME	VARCHAR(64) ,
  SIGNER9_POST	VARCHAR(250) ,
  SIGNER10_NAME	VARCHAR(64) ,
  SIGNER10_POST	VARCHAR(250)
);

/* Table: PARTY_COND, Owner: SYSADM */

/*CREATE TABLE PARTY_COND
(
  PARTY_FIELD_KOD	SMALLINT,
  FIELD_KOD	INTEGER,
  PRED	SMALLINT,
  PRED_TYPE	SMALLINT,
  PRED_VALUE1	VARCHAR(250) ,
  PRED_VALUE2	VARCHAR(50) ,
  PRED_VALUE	VARCHAR(250)
);*/
CREATE TABLE PARTY_COND
(
  PARTY_FIELD_KOD	SMALLINT,
  FIELD_KOD	INTEGER,
  PRED	SMALLINT,
  PRED_TYPE	SMALLINT,
  PRED_VALUE1	VARCHAR(250) ,
  PRED_VALUE2	VARCHAR(50) ,
  PRED_VALUE	VARCHAR(250)
  /*CONSTRAINT PARTY_COND_FK FOREIGN KEY (PARTY_FIELD_KOD) REFERENCES PARTY_FIELDS (KOD) ON DELETE CASCADE*/
);

/* Table: PARTY_FIELDS, Owner: SYSADM */

CREATE TABLE PARTY_FIELDS
(
  KOD	INTEGER /*CONSTRAINT PARTY_FIELDS_PK PRIMARY KEY*/ NOT NULL,
  NORDER	SMALLINT,
  NAME	VARCHAR(32) ,
  PARENT_KOD	SMALLINT,
  ISVERT	SMALLINT,
  INUSE	SMALLINT,
  COND_USED	SMALLINT,
  NTYPE	SMALLINT,
  NAME2	VARCHAR(32) ,
  NAME3	VARCHAR(32) ,
  START_VALUE	DECIMAL(12, 2),
  CONSTRAINT PARTY_FIELDS_PK PRIMARY KEY (KOD)
);

/* Table: PERSON_CARD, Owner: SYSADM */

CREATE TABLE PERSON_CARD
(
  PERSON_ID	INTEGER,
  PERSON_TYPE	CHAR(1) ,
  ITEM_ID	INTEGER,
  GET_DATE	TIMESTAMP,
  RETURN_DATE	TIMESTAMP,
  MUST_RETURN_DATE	TIMESTAMP,
  COMMENTT	VARCHAR(128) ,
  DELIVER_ID	INTEGER NOT NULL,
  DELIVER_QTY	SMALLINT,
  DELIVER_KOD	SMALLINT,
  GET_USER	VARCHAR(50) ,
  RETURN_USER	VARCHAR(50) ,
  SIGNATURE	VARCHAR(250)
);

/* Table: PHYSICAL_PERSON, Owner: SYSADM */

CREATE TABLE PHYSICAL_PERSON
(
  ID	INTEGER NOT NULL,
  NAME	VARCHAR(64) ,
  BIRTH_DATE	TIMESTAMP,
  ADDRESS	VARCHAR(250) ,
  PASSPORT_SERIES	VARCHAR(10) ,
  PASSPORT_NO	INTEGER,
  WORK_PLACE	VARCHAR(150) ,
  PERSON_POST	VARCHAR(150) ,
  IN_USER	VARCHAR(50) ,
  WORK_PHONE	VARCHAR(100) ,
  HOME_PHONE	VARCHAR(100) ,
  KOD	DECIMAL(10, 0),
  EMAIL	VARCHAR(80) ,
  MOBILE_PHONE	VARCHAR(32) ,
  PAGER_NO	INTEGER,
  PAGER_PHONE	VARCHAR(32) ,
  CODE	VARCHAR(32) ,
  STATUS	VARCHAR(1) ,
  PHOTO_OLD	BLOB /*SUB_TYPE 0 SEGMENT SIZE 80*/,
  CODE_INTNO	INTEGER,
  IS_BLOCKED	SMALLINT,
  BLOCK_REASON	VARCHAR(200) ,
  REGISTER_DATE	TIMESTAMP,
  IN_DATE	TIMESTAMP,
  LAST_EDIT_DATE	TIMESTAMP,
  LAST_EDIT_USER	VARCHAR(50) ,
  SPASSPORT_NO	VARCHAR(15) ,
  PIN_CODE	VARCHAR(250) ,
  SERVICE_BEGDATE	TIMESTAMP,
  SERVICE_ENDDATE	TIMESTAMP,
  CATEGORY_ID	INTEGER,
  PASSPORT_ORG	VARCHAR(128) ,
  SCOMMENT	VARCHAR(250) ,
  TABLE_ID	VARCHAR(30) ,
  BLOCK_EDIT_DATE	TIMESTAMP,
  BLOCK_EDIT_USER	VARCHAR(30) ,
  PERSON_STATUS	CHAR(1) ,
  DIVISION	VARCHAR(64) ,
  SUBDIVISION	VARCHAR(64) ,
  POST_TYPE	VARCHAR(20) ,
  STUDENT_COURSE	VARCHAR(200) ,
  SPECIALITY	VARCHAR(200) ,
  SPECIALIZATION	VARCHAR(200) ,
  STUDENT_GROUP	VARCHAR(100) ,
  AGE_CATEGORY	VARCHAR(50) ,
  SOCIAL_CATEGORY	VARCHAR(50) ,
  RFID	VARCHAR(32) ,
  BARCODE	VARCHAR(32) ,
  ACCESS_CATEGORY	INTEGER,
  PERSON_PASSWORD	VARCHAR(50)
);

/* Table: PRIMARY_FIELD, Owner: SYSADM */

CREATE TABLE PRIMARY_FIELD
(
  KOD	SMALLINT NOT NULL
);

/* Table: PRINT_HEADER, Owner: SYSADM */

CREATE TABLE PRINT_HEADER
(
  KOD	SMALLINT NOT NULL,
  HFTYPE	SMALLINT,
  SVALUE	VARCHAR(80)
);

/* Table: PROFILELIST, Owner: SYSADM */

CREATE TABLE PROFILELIST
(
  SUSER_NAME	VARCHAR(50) ,
  KOD	INTEGER NOT NULL,
  NAME	VARCHAR(64) ,
  NTYPE	SMALLINT,
  GROUP_KOD	INTEGER
);

/* Table: PUBLISHER_LIST, Owner: SYSADM */

CREATE TABLE PUBLISHER_LIST
(
  KOD	SMALLINT NOT NULL,
  NAME	VARCHAR(80) ,
  FULLNAME	VARCHAR(80)
);

/* Table: READER_CATEGORY, Owner: SYSADM */

CREATE TABLE READER_CATEGORY
(
  ID	INTEGER NOT NULL,
  NAME	VARCHAR(200) ,
  PREFIX	VARCHAR(20) ,
  SUFFIX	VARCHAR(20) ,
  DIGIT_QTY	SMALLINT
);

/* Table: READER_PHOTO, Owner: SYSADM */

CREATE TABLE READER_PHOTO
(
  ID	INTEGER NOT NULL,
  FLD_TYPE	SMALLINT NOT NULL,
  NORDER	INTEGER NOT NULL,
  FRAGMENT01	VARCHAR(250) ,
  FRAGMENT02	VARCHAR(250) ,
  FRAGMENT03	VARCHAR(250) ,
  FRAGMENT04	VARCHAR(250) ,
  FRAGMENT05	VARCHAR(250) ,
  FRAGMENT06	VARCHAR(250) ,
  FRAGMENT07	VARCHAR(250) ,
  FRAGMENT08	VARCHAR(250)
);

/* Table: READER_PHOTO2, Owner: SYSADM */

CREATE TABLE READER_PHOTO2
(
  ID	INTEGER,
  FIELD_TYPE	INTEGER,
  FRAGMENT_ORDER	INTEGER,
  FRAGMENT_VALUE	VARCHAR(250)
);

/* Table: READER_SRV_PLACE, Owner: SYSADM */

CREATE TABLE READER_SRV_PLACE
(
  READER_ID	INTEGER,
  PLACE_ID	INTEGER
);

/* Table: READER_VISIT, Owner: SYSADM */

CREATE TABLE READER_VISIT
(
  PERSON_ID	INTEGER,
  LOCK_ID	INTEGER,
  LOCK_DIRECTION	VARCHAR(10) ,
  PLACE_ID	INTEGER,
  VISIT_TIME	TIMESTAMP
);

/* Table: REFUSE_STAT, Owner: SYSADM */

CREATE TABLE REFUSE_STAT
(
  PERSON_ID	INTEGER,
  PERSON_TYPE	CHAR(1) ,
  DOC_ID	INTEGER,
  ITEM_ID	INTEGER,
  REASON_KOD	SMALLINT,
  REASON_STRING	VARCHAR(64) ,
  DEVICE_KOD	SMALLINT,
  DELIVER_KOD	SMALLINT,
  DATE_REFUSE	TIMESTAMP,
  PLACE_DATE	TIMESTAMP,
  USER_REFUSE	VARCHAR(30) ,
  REFUSE_TYPE	SMALLINT
);

/* Table: REFUSE_TYPES, Owner: SYSADM */

CREATE TABLE REFUSE_TYPES
(
  KOD	INTEGER NOT NULL,
  NAME	VARCHAR(80) ,
  IS_DEFAULT	SMALLINT
);

/* Table: REF_CARD, Owner: SYSADM */

CREATE TABLE REF_CARD
(
  CARD_ID	INTEGER,
  CARD_REF	INTEGER,
  NORDER	SMALLINT
);

/* Table: REF_DOC, Owner: SYSADM */

CREATE TABLE REF_DOC
(
  CARD_ID	INTEGER NOT NULL,
  DOC_ID	INTEGER NOT NULL
);

/* Table: SERVICE_LIST, Owner: SYSADM */

CREATE TABLE SERVICE_LIST
(
  SERVICE_ID	INTEGER,
  SERVICE_TYPE	INTEGER,
  PLACE_ID	INTEGER,
  READER_ID	INTEGER,
  SERVICE_DATE	DATE,
  SERVICE_TIME	TIMESTAMP,
  NUMBER_INFO	INTEGER,
  SERVICE_COMMENT	VARCHAR(250) ,
  IN_USER	VARCHAR(50) ,
  SERVICE_COST	DECIMAL(10, 2)
);

/* Table: SERVICE_PLACE, Owner: SYSADM */

CREATE TABLE SERVICE_PLACE
(
  ID	INTEGER,
  NAME	VARCHAR(250)
);

/* Table: SERVICE_TYPE, Owner: SYSADM */

CREATE TABLE SERVICE_TYPE
(
  ID	INTEGER,
  NAME	VARCHAR(250)
);

/* Table: SPECIALITY_LIST, Owner: SYSADM */

CREATE TABLE SPECIALITY_LIST
(
  KOD	SMALLINT,
  NAME	VARCHAR(80)
);

/* Table: STOCK_LIST, Owner: SYSADM */

CREATE TABLE STOCK_LIST
(
  KOD	SMALLINT NOT NULL,
  NAME	VARCHAR(48)
);

/* Table: STORAGE_LIST, Owner: SYSADM */

CREATE TABLE STORAGE_LIST
(
  KOD	INTEGER /*CONSTRAINT STORAGE_LIST_PK PRIMARY KEY*/ NOT NULL,
  NAME	VARCHAR(32) ,
  IS_DISTRIBUTION	SMALLINT,
  STYPE	VARCHAR(1) ,
  READER_QTY	INTEGER,
  FILE_READER_QTY	INTEGER,
  SHORT_NAME	VARCHAR(32),
  CONSTRAINT STORAGE_LIST_PK PRIMARY KEY (KOD)
);

/* Table: SUBDIVISION_LIST, Owner: SYSADM */

CREATE TABLE SUBDIVISION_LIST
(
  KOD	SMALLINT,
  NAME	VARCHAR(250) ,
  DIVISION_KOD	SMALLINT
);

/* Table: TABLEPROFILE, Owner: SYSADM */

CREATE TABLE TABLEPROFILE
(
  NAME	VARCHAR(20) ,
  PROFILE	VARCHAR(100)
);

/* Table: TEMPLATE_BODY, Owner: SYSADM */

CREATE TABLE TEMPLATE_BODY
(
  ID	INTEGER NOT NULL,
  FLD_TYPE	SMALLINT NOT NULL,
  NORDER	INTEGER NOT NULL,
  FRAGMENT01	VARCHAR(250) ,
  FRAGMENT02	VARCHAR(250) ,
  FRAGMENT03	VARCHAR(250) ,
  FRAGMENT04	VARCHAR(250) ,
  FRAGMENT05	VARCHAR(250) ,
  FRAGMENT06	VARCHAR(250) ,
  FRAGMENT07	VARCHAR(250) ,
  FRAGMENT08	VARCHAR(250)
);

/* Table: TEMPLATE_DATASRC, Owner: SYSADM */

CREATE TABLE TEMPLATE_DATASRC
(
  TEMPLATE_CODE	SMALLINT,
  DATASRC_CODE	SMALLINT
);

/* Table: TEMPLATE_XML, Owner: SYSADM */

CREATE TABLE TEMPLATE_XML
(
  CODE	INTEGER,
  NTYPE	INTEGER,
  NAME	VARCHAR(100) ,
  BODY_OLD	BLOB /*SUB_TYPE 0 SEGMENT SIZE 80*/,
  ISDEFAULT	INTEGER
);

/* Table: TEMPOR, Owner: SYSADM */

CREATE TABLE TEMPOR
(
  UNI_KOD	INTEGER,
  ID	INTEGER
);

/* Table: TTP, Owner: SYSADM */

CREATE TABLE TTP
(
  ID	INTEGER NOT NULL,
  DSCP_ID	INTEGER,
  DIVISION	INTEGER,
  SUBDIVISION	INTEGER,
  ACQUISITION_NORM	DECIMAL(6, 2),
  STUDENT_QTY	INTEGER,
  STUDENT_CONTR_QTY	INTEGER,
  DISTRIBUTION	INTEGER,
  CONTR_NORM	DECIMAL(6, 2),
  FLD102	INTEGER,
  FLD103	INTEGER,
  FLD104	INTEGER,
  FLD105	INTEGER,
  DAY_FROM	INTEGER,
  DAY_TO	INTEGER,
  IS_ACTIVE	INTEGER
);

/* Table: TTPHIER_FLDORDER, Owner: SYSADM */

CREATE TABLE TTPHIER_FLDORDER
(
  FLD_ID	INTEGER NOT NULL,
  NORDER	INTEGER NOT NULL
);

/* Table: TTPHIER_OPTIONS, Owner: SYSADM */

CREATE TABLE TTPHIER_OPTIONS
(
  FLD_USED_QTY	INTEGER NOT NULL,
  SHOW_UNUSED	INTEGER NOT NULL,
  SHOW_READER_QTY	INTEGER NOT NULL
);

/* Table: TTP_FIELD, Owner: SYSADM */

CREATE TABLE TTP_FIELD
(
  ID	INTEGER NOT NULL,
  NAME	VARCHAR(200) ,
  NORDER	SMALLINT
);

/* Table: TTP_FIELD_ENUM, Owner: SYSADM */

CREATE TABLE TTP_FIELD_ENUM
(
  FLD_ID	INTEGER NOT NULL,
  ENUM_ID	INTEGER NOT NULL,
  NAME	VARCHAR(200) ,
  NORDER	INTEGER
);

/* Table: TYPE_LIST, Owner: SYSADM */

CREATE TABLE TYPE_LIST
(
  KOD	SMALLINT NOT NULL,
  NAME	VARCHAR(80)
);

/* Table: TYPICAL_VALUES, Owner: SYSADM */

CREATE TABLE TYPICAL_VALUES
(
  VALUE_TYPE	VARCHAR(50) ,
  VALUE_TEXT	VARCHAR(250) ,
  VALUE_ORDER	INTEGER
);

/* Table: USED_KOD, Owner: SYSADM */

CREATE TABLE USED_KOD
(
  KOD	INTEGER,
  NEWKOD	INTEGER
);

/* Table: USERGROUP, Owner: SYSADM */

CREATE TABLE USERGROUP
(
  ALIAS	VARCHAR(50)  NOT NULL,
  GROUPCODE	INTEGER,
  ISDEFAULT	SMALLINT
);

/* Table: USERLIST, Owner: SYSADM */

CREATE TABLE USERLIST
(
  ALIAS	VARCHAR(50) ,
  NAME	VARCHAR(250)
);

/* Table: USERREP_AUTHORITY, Owner: SYSADM */

CREATE TABLE USERREP_AUTHORITY
(
  REP_CODE	INTEGER NOT NULL,
  GROUP_CODE	INTEGER NOT NULL
);

/* Table: USER_REPORTS, Owner: SYSADM */

CREATE TABLE USER_REPORTS
(
  KOD	SMALLINT,
  SQLS	BLOB /*SUB_TYPE 0 SEGMENT SIZE 80*/,
  NAME	VARCHAR(64) ,
  FILENAME	VARCHAR(100) ,
  BODY	BLOB /*SUB_TYPE 0 SEGMENT SIZE 80*/
);

/* Table: WINPROFILES, Owner: SYSADM */

CREATE TABLE WINPROFILES
(
  PROFILE_KOD	INTEGER,
  NORDER	SMALLINT,
  WIN_KOD	SMALLINT,
  WINDOW_NAME	VARCHAR(40) ,
  WIN_TYPE	SMALLINT,
  WIN_AUX_INT	INTEGER,
  WIN_AUX_STR	VARCHAR(100) ,
  WIN_X	DECIMAL(10, 3),
  WIN_Y	DECIMAL(10, 3),
  WIN_W	DECIMAL(10, 3),
  WIN_H	DECIMAL(10, 3),
  WIN_STATE	SMALLINT
);

/* Table: WORD_INDEX, Owner: SYSADM */

/*CREATE TABLE WORD_INDEX
(
  DOC_ID	INTEGER,
  FIELD_KOD	SMALLINT,
  WORD	VARCHAR(50)
);*/
CREATE TABLE WORD_INDEX
(
  DOC_ID	INTEGER,
  FIELD_KOD	SMALLINT,
  WORD	VARCHAR(50)
  /*CONSTRAINT WORD_INDEX_FK FOREIGN KEY (DOC_ID) REFERENCES DOCUMENT (DOC_ID) ON DELETE CASCADE*/
);

/*  Index definitions for all user tables */

/*CREATE INDEX ACC_ELDOCS_DOC_ID ON ACC_ELDOCS(DOC_ID);
CREATE INDEX ACC_ELDOCS_DT_ACC ON ACC_ELDOCS(DT_ACC);
CREATE INDEX ACC_ELDOCS_R_KOD ON ACC_ELDOCS(R_KOD);
CREATE INDEX ANNOT_WORD_IDX1 ON ANNOT_WORD_INDEX(DOC_ID);
CREATE INDEX ANNOT_WORD_IDX2 ON ANNOT_WORD_INDEX(WORD, DOC_ID);
CREATE INDEX AUTHOR_MARK_IDX ON AUTHOR_MARK_LIST(NAME);
CREATE UNIQUE INDEX AUTHOR_MARK_KOD ON AUTHOR_MARK_LIST(KOD);
CREATE INDEX AUTHOR_SYN_IDX ON AUTHOR_SYNONYM(AUTHOR);
CREATE INDEX AUTHOR_SYN_IDX2 ON AUTHOR_SYNONYM(ID, AUTHOR);
CREATE INDEX AUTHOR_DOC_IDX ON AUTHOR_WORD_INDEX(DOC_ID);
CREATE INDEX AUTHOR_FLD_IDX ON AUTHOR_WORD_INDEX(AUTHOR, DOC_ID);
CREATE INDEX CARD_NAME_IDX ON CARDS(NAME);
CREATE UNIQUE INDEX CARD_UNI ON CARDS(CARD_ID);
CREATE UNIQUE INDEX CITY_IDX ON CITY_LIST(KOD);
CREATE INDEX COLPROF_IDX ON COLPROFILES(PROFILE_KOD, WIN_KOD);
CREATE UNIQUE INDEX COLPROF_UNI ON COLPROFILES(PROFILE_KOD, WIN_KOD, COL_KOD);
CREATE INDEX COLPROF_WIN_IDX ON COLPROFILES(WIN_KOD);
CREATE UNIQUE INDEX DICTION_LIST_IDX ON DICTION_LIST(KOD);
CREATE INDEX DICTION_IDX ON DICTION_WORD(DIC_KOD, WORD);
CREATE UNIQUE INDEX DICTION_UNI ON DICTION_WORD(KOD);
CREATE INDEX DSCP_ID ON DISCIPLINE(ID);
CREATE INDEX DSCP_NAME ON DISCIPLINE(NAME);
CREATE UNIQUE INDEX DIVISION_IDX ON DIVISION_LIST(KOD);
CREATE INDEX DOCUM_DOCID_STATUS ON DOCUMENT(DOC_ID, STATUS);
CREATE INDEX DOCUM_EDITDATE ON DOCUMENT(LAST_EDIT_DATE);
CREATE INDEX DOCUM_INDATE ON DOCUMENT(IN_DATE);
CREATE INDEX DOCUM_INUSER ON DOCUMENT(IN_USER);
CREATE INDEX DOCUM_PARENT ON DOCUMENT(PARENT_ID);
CREATE INDEX DOC_GROUP_KOD ON DOCUMENT(GROUP_KOD);
CREATE INDEX DOC_NAME_PREF_IDX ON DOCUMENT(NAME_PREFIX);
CREATE INDEX DOC_PRIMARY_IDX ON DOCUMENT(NAME_PREFIX, PUBLISHER);
CREATE INDEX DOC_TYPE ON DOCUMENT(DOC_TYPE);
CREATE INDEX FILENAME_IDX ON DOCUMENT(FILENAME);
CREATE UNIQUE INDEX I_PASS_UDOCNUM ON DOCUMENT(DOC_ID);
CREATE INDEX LANG_KOD_IDX ON DOCUMENT(LANG_KOD);
CREATE INDEX PUBL_PLACE_IDX ON DOCUMENT(PUBL_PLACE);
CREATE INDEX PUBL_YEAR_IDX ON DOCUMENT(PUBL_YEAR);
CREATE INDEX UDK_IDX ON DOCUMENT(UDK);
CREATE INDEX COL016_IDX ON DOCXFIELD_VALUE(COL016);
CREATE INDEX COL017_IDX ON DOCXFIELD_VALUE(COL017);
CREATE INDEX COL018_IDX ON DOCXFIELD_VALUE(COL018);
CREATE INDEX COL019_IDX ON DOCXFIELD_VALUE(COL019);
CREATE INDEX COL024_IDX ON DOCXFIELD_VALUE(COL024);
CREATE UNIQUE INDEX DOCXFIELD_VAL_UNI ON DOCXFIELD_VALUE(DOC_ID);
CREATE INDEX DA_HEADER_IDX ON DOC_AGENT_INDEX(RECORD_HEADER);
CREATE INDEX DA_ID_IDX ON DOC_AGENT_INDEX(DOC_ID);
CREATE INDEX DOC_ANNON_IDX ON DOC_ANNOTATION(DOC_ID, NORDER);
CREATE INDEX DOC_DSCP_DOC_ID ON DOC_DSCP(DOC_ID);
CREATE INDEX DOC_DSCP_DSCP_ID ON DOC_DSCP(DSCP_ID);
CREATE INDEX DOCITEM_INTNO ON DOC_ITEM(ITEM_INTNO);
CREATE INDEX DOC_ITEM_DOC_ID ON DOC_ITEM(DOC_ID);
CREATE INDEX DOC_ITEM_IND ON DOC_ITEM(DOC_ID, ITEM_ID);
CREATE INDEX DOC_ITEM_PARTYKOD ON DOC_ITEM(PARTY_KOD);
CREATE UNIQUE INDEX DOC_ITEM_UNI ON DOC_ITEM(ITEM_ID);
CREATE INDEX ITEM_BARCODE_IDX ON DOC_ITEM(BARCODE);
CREATE INDEX ITEM_NO ON DOC_ITEM(ITEM_NO);
CREATE INDEX ITEM_RFID_IDX ON DOC_ITEM(RFID);
CREATE INDEX DOC_LONGFIELD_IDX ON DOC_LONGFIELD(ID, FLD_TYPE, NORDER);
CREATE UNIQUE INDEX DOC_NUM_IDX ON DOC_NUMERATION(DOC_ID);
CREATE UNIQUE INDEX DOC_OTHERIDX ON DOC_OTHERFIELD(DOC_ID);
CREATE INDEX PRESENCE_UNI ON DOC_PRESENCE(DOC_ID);
CREATE INDEX PRESENCE_NUM_IDX ON DOC_PRESENCE_NUM(DOC_ID, DOC_OWNER, NORDER);
CREATE INDEX DSCP_TOPIC_ID ON DSCP_TOPIC(DSCP_ID);
CREATE INDEX EXTQUERY_BODY_IDX ON EXTQUERY_BODY(ID, FLD_TYPE, NORDER);
CREATE INDEX GEN_XML_TREE_IDX ON GENERAL_XML_TREE(TREE_ID);
CREATE UNIQUE INDEX GENPROF_UNI ON GENPROFILES(SUSER_NAME, SECTION_NAME, ITEM_NAME);
CREATE INDEX ITEM_ADDITION_IDX ON ITEM_ADDITION(DOC_ID);
CREATE INDEX ITEM_OUT_ITEM ON ITEM_OUTREASON(ITEM_ID);
CREATE UNIQUE INDEX ITEM_OUT_UNI ON ITEM_OUTREASON(ID);
CREATE UNIQUE INDEX JUR_UNI ON JURIDICAL_PERSON(ID);
CREATE INDEX LANGUAGES_I ON LANGUAGES(CODE);
CREATE INDEX MARCSYS_COUNTRY_I ON MARCSYS_COUNTRY(CODE);
CREATE INDEX MASS_ACTION_IDX1 ON MASS_ACTION(ACTION_ID);
CREATE INDEX MASS_ACTION_IDX2 ON MASS_ACTION(ACTION_DATE);
CREATE UNIQUE INDEX MAX_CODE ON MAXES2(CODE);
CREATE INDEX MISCPROF_IDX ON MISCPROFILES(PROFILE_KOD, WIN_KOD);
CREATE INDEX MISCPROF_WIN_IDX ON MISCPROFILES(WIN_KOD);
CREATE UNIQUE INDEX PARTY_UNI ON PARTY(KOD);
CREATE UNIQUE INDEX PARTY_FIELD_UNI ON PARTY_FIELDS(KOD);
CREATE INDEX PERSON_CARD_ITEM ON PERSON_CARD(ITEM_ID);
CREATE INDEX PERSON_CARD_PERSON ON PERSON_CARD(PERSON_ID);
CREATE UNIQUE INDEX PERSON_CARD_UNI ON PERSON_CARD(DELIVER_ID);
CREATE INDEX PHYSPERS_INTNO ON PHYSICAL_PERSON(CODE_INTNO);
CREATE INDEX PHYS_CODE ON PHYSICAL_PERSON(CODE);
CREATE INDEX PHYS_NAME ON PHYSICAL_PERSON(NAME);
CREATE INDEX PHYS_PERS_ ON PHYSICAL_PERSON(KOD);
CREATE INDEX PHYS_PERS_TABID ON PHYSICAL_PERSON(TABLE_ID);
CREATE UNIQUE INDEX PHYS_UNI ON PHYSICAL_PERSON(ID);
CREATE UNIQUE INDEX PROFLST_IDX ON PROFILELIST(KOD);
CREATE INDEX PROFLST_USER ON PROFILELIST(SUSER_NAME);
CREATE UNIQUE INDEX PUBLISHER_IDX ON PUBLISHER_LIST(KOD);
CREATE INDEX READER_PHOTO_IDX ON READER_PHOTO(ID, FLD_TYPE, NORDER);
CREATE INDEX READER_PHOTO2_IDX ON READER_PHOTO2(ID, FIELD_TYPE, FRAGMENT_ORDER);
CREATE INDEX READER_SRV_IDX1 ON READER_SRV_PLACE(READER_ID);
CREATE INDEX READER_SRV_IDX2 ON READER_SRV_PLACE(PLACE_ID);
CREATE INDEX RDRVISIT_LOCKIDX ON READER_VISIT(LOCK_ID);
CREATE INDEX RDRVISIT_PERSONIDX ON READER_VISIT(PERSON_ID);
CREATE INDEX RDRVISIT_PLACEIDX ON READER_VISIT(PLACE_ID);
CREATE INDEX RDRVISIT_TIMEIDX ON READER_VISIT(VISIT_TIME);
CREATE INDEX REF_IND1 ON REF_CARD(CARD_ID);
CREATE INDEX REF_IND2 ON REF_CARD(CARD_REF);
CREATE UNIQUE INDEX REF_UNI ON REF_CARD(CARD_ID, CARD_REF);
CREATE INDEX REF_DOC_UNI ON REF_DOC(DOC_ID, CARD_ID);
CREATE INDEX REF_DOC_UNI2 ON REF_DOC(CARD_ID, DOC_ID);
CREATE INDEX SERVICE_IDX1 ON SERVICE_LIST(SERVICE_ID);
CREATE INDEX SERVICE_IDX2 ON SERVICE_LIST(SERVICE_TYPE);
CREATE INDEX SERVICE_IDX3 ON SERVICE_LIST(PLACE_ID);
CREATE INDEX SERVICE_IDX4 ON SERVICE_LIST(SERVICE_DATE);
CREATE INDEX SERVICE_IDX5 ON SERVICE_LIST(SERVICE_TIME);
CREATE UNIQUE INDEX DEVICE_IDX ON STORAGE_LIST(KOD);
CREATE UNIQUE INDEX SUBDIVISION_IDX ON SUBDIVISION_LIST(KOD);
CREATE INDEX TEMPLATE_BODY_IDX ON TEMPLATE_BODY(ID, FLD_TYPE, NORDER);
CREATE UNIQUE INDEX TYPE_IDX ON TYPE_LIST(KOD);
CREATE UNIQUE INDEX USED_UNI ON USED_KOD(KOD, NEWKOD);
CREATE UNIQUE INDEX USERGRP_IDX ON USERGROUP(ALIAS, GROUPCODE);
CREATE UNIQUE INDEX USERLIST_ALIAS_IDX ON USERLIST(ALIAS);
CREATE INDEX WINPROF_IDX ON WINPROFILES(PROFILE_KOD);
CREATE INDEX WINPROF_IDX2 ON WINPROFILES(PROFILE_KOD, WINDOW_NAME);
CREATE UNIQUE INDEX WINPROF_UNI ON WINPROFILES(PROFILE_KOD, WIN_KOD);
CREATE INDEX WINPROF_WIN2_IDX ON WINPROFILES(WINDOW_NAME);
CREATE INDEX WINPROF_WIN_IDX ON WINPROFILES(WIN_KOD);
CREATE INDEX WORD_DOC_IDX ON WORD_INDEX(DOC_ID);
CREATE INDEX WORD_FLD_IDX ON WORD_INDEX(FIELD_KOD, WORD, DOC_ID);*/
/*ALTER TABLE ANNOT_WORD_INDEX ADD CONSTRAINT ANNOT_DOC_FK FOREIGN KEY (DOC_ID) REFERENCES DOCUMENT (DOC_ID) ON DELETE CASCADE;
ALTER TABLE AUTHOR_WORD_INDEX ADD CONSTRAINT AUTHOR_WORD_INDEX_FK FOREIGN KEY (DOC_ID) REFERENCES DOCUMENT (DOC_ID) ON DELETE CASCADE;
ALTER TABLE DOCXFIELD_VALUE ADD CONSTRAINT DOCXFIELD_VALUE_FK FOREIGN KEY (DOC_ID) REFERENCES DOCUMENT (DOC_ID) ON DELETE CASCADE;
ALTER TABLE DOC_ITEM ADD CONSTRAINT DOC_ITEM_FK1 FOREIGN KEY (DOC_ID) REFERENCES DOCUMENT (DOC_ID) ON DELETE CASCADE;
ALTER TABLE DOC_OTHERFIELD ADD CONSTRAINT DOC_OTHERFIELD_FK FOREIGN KEY (DOC_ID) REFERENCES DOCUMENT (DOC_ID) ON DELETE CASCADE;
ALTER TABLE DOC_REQUEST ADD CONSTRAINT DOC_REQUEST_FK FOREIGN KEY (DOC_ID) REFERENCES DOCUMENT (DOC_ID) ON DELETE CASCADE;
/*ALTER TABLE ORDER_CHAIN ADD CONSTRAINT ORDER_CHAIN_FK FOREIGN KEY (DELIVER_KOD) REFERENCES STORAGE_LIST (KOD) ON DELETE CASCADE;*/
/*ALTER TABLE ORG_ORDER ADD CONSTRAINT ORG_ORDER_FK FOREIGN KEY (DOC_ID) REFERENCES DOCUMENT (DOC_ID) ON DELETE CASCADE;*/
/*ALTER TABLE PARTY_COND ADD CONSTRAINT PARTY_COND_FK FOREIGN KEY (PARTY_FIELD_KOD) REFERENCES PARTY_FIELDS (KOD) ON DELETE CASCADE;*/
/*ALTER TABLE WORD_INDEX ADD CONSTRAINT WORD_INDEX_FK FOREIGN KEY (DOC_ID) REFERENCES DOCUMENT (DOC_ID) ON DELETE CASCADE;*/


/* Grant Roles for this database */


/* Grant permissions for this database */

/*GRANT INSERT, SELECT ON ACC_ELDOCS TO PUBLIC;
GRANT DELETE, INSERT, SELECT, UPDATE ON ACQUISITION_TYPES TO BIBLIOGR;
GRANT DELETE, INSERT, SELECT, UPDATE ON ACQUISITION_TYPES TO KOMPL;
GRANT DELETE, INSERT, SELECT, UPDATE ON ACQUISITION_TYPES TO PERIOD;
GRANT SELECT ON ACQUISITION_TYPES TO PUBLIC;
GRANT DELETE, INSERT, SELECT, UPDATE ON ANNOT_WORD_INDEX TO BIBLIOGR;
GRANT DELETE, INSERT, SELECT, UPDATE ON ANNOT_WORD_INDEX TO KOMPL;
GRANT DELETE, INSERT, SELECT, UPDATE ON ANNOT_WORD_INDEX TO PERIOD;
GRANT DELETE, INSERT, SELECT ON ANNOT_WORD_INDEX TO PUBLIC;
GRANT SELECT ON AUTHORITYLIST TO PUBLIC;
GRANT SELECT ON AUTHOR_LIST TO PUBLIC;
GRANT DELETE, INSERT, SELECT, UPDATE ON AUTHOR_MARK_LIST TO BIBLIOGR;
GRANT DELETE, INSERT, SELECT, UPDATE ON AUTHOR_MARK_LIST TO KOMPL;
GRANT DELETE, INSERT, SELECT, UPDATE ON AUTHOR_MARK_LIST TO PERIOD;
GRANT SELECT ON AUTHOR_MARK_LIST TO PUBLIC;
GRANT DELETE, INSERT, SELECT, UPDATE ON AUTHOR_SYNONYM TO BIBLIOGR;
GRANT DELETE, INSERT, SELECT, UPDATE ON AUTHOR_SYNONYM TO KOMPL;
GRANT DELETE, INSERT, SELECT, UPDATE ON AUTHOR_SYNONYM TO PERIOD;
GRANT SELECT ON AUTHOR_SYNONYM TO PUBLIC;
GRANT DELETE, INSERT, SELECT, UPDATE ON AUTHOR_WORD_INDEX TO BIBLIOGR;
GRANT DELETE, INSERT, SELECT, UPDATE ON AUTHOR_WORD_INDEX TO KOMPL;
GRANT DELETE, INSERT, SELECT, UPDATE ON AUTHOR_WORD_INDEX TO PERIOD;
GRANT SELECT ON AUTHOR_WORD_INDEX TO PUBLIC;
GRANT SELECT ON AUTH_TYPE_MAIN TO PUBLIC;
GRANT DELETE, INSERT, SELECT, UPDATE ON BLOCKREASON_LIST TO BIBLIOGR;
GRANT DELETE, INSERT, SELECT, UPDATE ON BLOCKREASON_LIST TO KOMPL;
GRANT DELETE, INSERT, SELECT, UPDATE ON BLOCKREASON_LIST TO PERIOD;
GRANT SELECT ON BLOCKREASON_LIST TO PUBLIC;
GRANT DELETE, INSERT, SELECT, UPDATE ON CARDS TO BIBLIOGR;
GRANT DELETE, INSERT, SELECT, UPDATE ON CARDS TO KOMPL;
GRANT DELETE, INSERT, SELECT, UPDATE ON CARDS TO PERIOD;
GRANT SELECT ON CARDS TO STUD;
GRANT INSERT, SELECT ON CARDS TO STUDENT;
GRANT SELECT ON CITY_LIST TO PUBLIC;
GRANT SELECT ON CLIENT_FILES TO PUBLIC;
GRANT DELETE, INSERT, SELECT, UPDATE ON CODE_PARSING_LIST TO BIBLIOGR;
GRANT DELETE, INSERT, SELECT, UPDATE ON CODE_PARSING_LIST TO KOMPL;
GRANT DELETE, INSERT, SELECT, UPDATE ON CODE_PARSING_LIST TO PERIOD;
GRANT SELECT ON CODE_PARSING_LIST TO PUBLIC;
GRANT DELETE, INSERT, SELECT, UPDATE ON CODE_PARSING_RULES TO BIBLIOGR;
GRANT DELETE, INSERT, SELECT, UPDATE ON CODE_PARSING_RULES TO KOMPL;
GRANT DELETE, INSERT, SELECT, UPDATE ON CODE_PARSING_RULES TO PERIOD;
GRANT SELECT ON CODE_PARSING_RULES TO PUBLIC;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON COLPROFILES TO PUBLIC;
GRANT SELECT ON DEVICES TO PUBLIC;
GRANT DELETE, INSERT, SELECT, UPDATE ON DICTION_LIST TO BIBLIOGR;
GRANT DELETE, INSERT, SELECT, UPDATE ON DICTION_LIST TO KOMPL;
GRANT DELETE, INSERT, SELECT, UPDATE ON DICTION_LIST TO PERIOD;
GRANT SELECT ON DICTION_LIST TO PUBLIC;
GRANT DELETE, INSERT, SELECT, UPDATE ON DICTION_WORD TO BIBLIOGR;
GRANT DELETE, INSERT, SELECT, UPDATE ON DICTION_WORD TO KOMPL;
GRANT DELETE, INSERT, SELECT, UPDATE ON DICTION_WORD TO PERIOD;
GRANT SELECT ON DICTION_WORD TO PUBLIC;
GRANT DELETE, INSERT, SELECT, UPDATE ON DISCIPLINE TO BIBLIOGR;
GRANT DELETE, INSERT, SELECT, UPDATE ON DISCIPLINE TO KOMPL;
GRANT INSERT, SELECT ON DISCIPLINE TO PERIOD;
GRANT SELECT ON DISCIPLINE TO PUBLIC;
GRANT SELECT ON DISCIPLINE TO STUD;
GRANT SELECT ON DISCIPLINE TO STUDENT;
GRANT DELETE, INSERT, SELECT, UPDATE ON DIVISION_LIST TO BIBLIOGR;
GRANT DELETE, INSERT, SELECT, UPDATE ON DIVISION_LIST TO KOMPL;
GRANT DELETE, INSERT, SELECT, UPDATE ON DIVISION_LIST TO PERIOD;
GRANT SELECT ON DIVISION_LIST TO PUBLIC;
GRANT SELECT ON DOCNAME_LIST TO PUBLIC;
GRANT SELECT ON DOCTYPE TO PUBLIC;
GRANT SELECT ON DOCTYPE_FIELD TO PUBLIC;
GRANT DELETE, INSERT, SELECT, UPDATE ON DOCUMENT TO BIBLIOGR;
GRANT DELETE, INSERT, SELECT, UPDATE ON DOCUMENT TO KOMPL;
GRANT DELETE, INSERT, SELECT, UPDATE ON DOCUMENT TO PERIOD;
GRANT SELECT ON DOCUMENT TO STUD;
GRANT SELECT, UPDATE ON DOCUMENT TO STUDENT;
GRANT SELECT ON DOCXFIELD_LIST TO PUBLIC;
GRANT DELETE, INSERT, SELECT, UPDATE ON DOCXFIELD_VALUE TO BIBLIOGR;
GRANT DELETE, INSERT, SELECT, UPDATE ON DOCXFIELD_VALUE TO KOMPL;
GRANT DELETE, INSERT, SELECT, UPDATE ON DOCXFIELD_VALUE TO PERIOD;
GRANT SELECT ON DOCXFIELD_VALUE TO PUBLIC;
GRANT SELECT ON DOCXFIELD_VALUE TO STUD;
GRANT SELECT, UPDATE ON DOCXFIELD_VALUE TO STUDENT;
GRANT DELETE, INSERT, SELECT, UPDATE ON DOC_AGENT_INDEX TO PUBLIC;
GRANT DELETE, INSERT, SELECT, UPDATE ON DOC_ANNOTATION TO PUBLIC;
GRANT DELETE, INSERT, SELECT, UPDATE ON DOC_DSCP TO BIBLIOGR;
GRANT DELETE, INSERT, SELECT, UPDATE ON DOC_DSCP TO KOMPL;
GRANT DELETE, INSERT, SELECT, UPDATE ON DOC_DSCP TO PERIOD;
GRANT SELECT ON DOC_DSCP TO PUBLIC;
GRANT SELECT ON DOC_DSCP TO STUD;
GRANT SELECT ON DOC_DSCP TO STUDENT;
GRANT DELETE, INSERT, SELECT, UPDATE ON DOC_ITEM TO BIBLIOGR;
GRANT DELETE, INSERT, SELECT, UPDATE ON DOC_ITEM TO KOMPL;
GRANT DELETE, INSERT, SELECT, UPDATE ON DOC_ITEM TO PERIOD;
GRANT SELECT ON DOC_ITEM TO STUD;
GRANT SELECT, UPDATE ON DOC_ITEM TO STUDENT;
GRANT DELETE, INSERT, SELECT, UPDATE ON DOC_LONGFIELD TO BIBLIOGR;
GRANT DELETE, INSERT, SELECT, UPDATE ON DOC_LONGFIELD TO KOMPL;
GRANT DELETE, INSERT, SELECT, UPDATE ON DOC_LONGFIELD TO PERIOD;
GRANT SELECT ON DOC_LONGFIELD TO STUD;
GRANT SELECT ON DOC_LONGFIELD TO STUDENT;
GRANT DELETE, INSERT, SELECT, UPDATE ON DOC_NUMERATION TO BIBLIOGR;
GRANT DELETE, INSERT, SELECT, UPDATE ON DOC_NUMERATION TO KOMPL;
GRANT DELETE, INSERT, SELECT, UPDATE ON DOC_NUMERATION TO PERIOD;
GRANT SELECT ON DOC_NUMERATION TO STUD;
GRANT SELECT, UPDATE ON DOC_NUMERATION TO STUDENT;
GRANT DELETE, INSERT, SELECT, UPDATE ON DOC_OTHERFIELD TO BIBLIOGR;
GRANT DELETE, INSERT, SELECT, UPDATE ON DOC_OTHERFIELD TO KOMPL;
GRANT DELETE, INSERT, SELECT, UPDATE ON DOC_OTHERFIELD TO PERIOD;
GRANT SELECT ON DOC_OTHERFIELD_LST TO PUBLIC;
GRANT DELETE, INSERT, SELECT, UPDATE ON DOC_PRESENCE TO BIBLIOGR;
GRANT DELETE, INSERT, SELECT, UPDATE ON DOC_PRESENCE TO KOMPL;
GRANT DELETE, INSERT, SELECT, UPDATE ON DOC_PRESENCE TO PERIOD;
GRANT SELECT ON DOC_PRESENCE TO PUBLIC;
GRANT DELETE, INSERT, SELECT, UPDATE ON DOC_PRESENCE_NUM TO BIBLIOGR;
GRANT DELETE, INSERT, SELECT, UPDATE ON DOC_PRESENCE_NUM TO KOMPL;
GRANT DELETE, INSERT, SELECT, UPDATE ON DOC_PRESENCE_NUM TO PERIOD;
GRANT SELECT ON DOC_PRESENCE_NUM TO PUBLIC;
GRANT DELETE, INSERT, SELECT, UPDATE ON DOC_REQUEST TO BIBLIOGR;
GRANT DELETE, INSERT, SELECT, UPDATE ON DOC_REQUEST TO KOMPL;
GRANT SELECT, UPDATE ON DOC_REQUEST TO PERIOD;
GRANT SELECT ON DOC_REQUEST TO PUBLIC;
GRANT SELECT ON DOC_REQUEST TO STUD;
GRANT SELECT ON DOC_REQUEST TO STUDENT;
GRANT DELETE, INSERT, UPDATE ON DSCP_TOPIC TO BIBLIOGR;
GRANT DELETE, INSERT, UPDATE ON DSCP_TOPIC TO KOMPL;
GRANT INSERT ON DSCP_TOPIC TO PERIOD;
GRANT SELECT ON DSCP_TOPIC TO PUBLIC;
GRANT DELETE, INSERT, SELECT, UPDATE ON EXTQUERY_BODY TO BIBLIOGR;
GRANT DELETE, INSERT, SELECT, UPDATE ON EXTQUERY_BODY TO KOMPL;
GRANT SELECT ON EXTQUERY_BODY TO PUBLIC;
GRANT DELETE, INSERT, SELECT, UPDATE ON GENERAL_XML_TREE TO PUBLIC;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON GENPROFILES TO PUBLIC;
GRANT SELECT ON GROUPAUTHORITY TO PUBLIC;
GRANT SELECT ON GROUPLIST TO PUBLIC;
GRANT SELECT ON INDEXED_FIELD TO PUBLIC;
GRANT  ON INVENT_BOOK TO ;
GRANT UPDATE (CUR_NO) ON INVENT_BOOK TO PUBLIC;
GRANT SELECT ON INVENT_BOOK TO PUBLIC;
GRANT DELETE, INSERT, SELECT, UPDATE ON ITEM_ADDITION TO BIBLIOGR;
GRANT DELETE, INSERT, SELECT, UPDATE ON ITEM_ADDITION TO KOMPL;
GRANT DELETE, INSERT, SELECT, UPDATE ON ITEM_ADDITION TO PERIOD;
GRANT SELECT ON ITEM_ADDITION TO PUBLIC;
GRANT DELETE, INSERT, SELECT, UPDATE ON ITEM_OUTREASON TO BIBLIOGR;
GRANT DELETE, INSERT, SELECT, UPDATE ON ITEM_OUTREASON TO KOMPL;
GRANT DELETE, INSERT, SELECT, UPDATE ON ITEM_OUTREASON TO PERIOD;
GRANT SELECT ON ITEM_OUTREASON TO PUBLIC;
GRANT DELETE, INSERT, SELECT, UPDATE ON JURIDICAL_PERSON TO BIBLIOGR;
GRANT DELETE, INSERT, SELECT, UPDATE ON JURIDICAL_PERSON TO KOMPL;
GRANT DELETE, INSERT, SELECT, UPDATE ON JURIDICAL_PERSON TO PERIOD;
GRANT SELECT ON JURIDICAL_PERSON TO PUBLIC;
GRANT SELECT ON JURIDICAL_PERSON TO STUD;
GRANT DELETE, INSERT, SELECT, UPDATE ON JURIDICAL_PERSON TO STUDENT;
GRANT SELECT ON KAT_DOC TO PUBLIC;
GRANT DELETE, INSERT, SELECT, UPDATE ON KNOWLEDGE_T TO PUBLIC;
GRANT DELETE, INSERT, SELECT, UPDATE ON LANGUAGES TO BIBLIOGR;
GRANT DELETE, INSERT, SELECT, UPDATE ON LANGUAGES TO KOMPL;
GRANT DELETE, INSERT, SELECT, UPDATE ON LANGUAGES TO PERIOD;
GRANT SELECT ON LANGUAGES TO PUBLIC;
GRANT SELECT ON LICENCE TO PUBLIC;
GRANT SELECT ON LICENCE_INFO TO PUBLIC;
GRANT DELETE, INSERT, SELECT, UPDATE ON MARCSYS_COUNTRY TO BIBLIOGR;
GRANT DELETE, INSERT, SELECT, UPDATE ON MARCSYS_COUNTRY TO KOMPL;
GRANT DELETE, INSERT, SELECT, UPDATE ON MARCSYS_COUNTRY TO PERIOD;
GRANT SELECT ON MARCSYS_COUNTRY TO PUBLIC;
GRANT SELECT ON MARCSYS_FORM TO PUBLIC;
GRANT SELECT ON MARCSYS_RELATOR TO PUBLIC;
GRANT SELECT ON MARC_DOCDESC TO PUBLIC;
GRANT SELECT ON MARC_DOCLEVEL TO PUBLIC;
GRANT SELECT ON MARC_DOCTYPE TO PUBLIC;
GRANT SELECT ON MASS_ACTION TO PUBLIC;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON MASTER_CARDS TO PUBLIC;
GRANT SELECT ON MAT_AUDIO TO PUBLIC;
GRANT SELECT ON MAT_EL_DOC TO PUBLIC;
GRANT SELECT ON MAT_VIDEO TO PUBLIC;
GRANT SELECT, UPDATE ON MAXES TO BIBLIOGR;
GRANT SELECT, UPDATE ON MAXES TO KOMPL;
GRANT SELECT, UPDATE ON MAXES TO PERIOD;
GRANT UPDATE (GRPCNT) ON MAXES TO PUBLIC;
GRANT UPDATE (PROFILE_KOD) ON MAXES TO PUBLIC;
GRANT SELECT ON MAXES TO PUBLIC;
GRANT SELECT, UPDATE ON MAXES TO STUDENT;
GRANT SELECT, UPDATE ON MAXES2 TO PUBLIC;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON MISCPROFILES TO PUBLIC;
GRANT SELECT ON MONEY_UNIT TO PUBLIC;
GRANT SELECT ON NAME_LIST TO PUBLIC;
GRANT UPDATE ON OPTIONS TO BIBLIOGR;
GRANT UPDATE ON OPTIONS TO KOMPL;
GRANT UPDATE ON OPTIONS TO PERIOD;
GRANT SELECT ON OPTIONS TO PUBLIC;
GRANT SELECT, UPDATE ON OPTIONS2 TO PUBLIC;
GRANT DELETE, INSERT, SELECT, UPDATE ON ORDERS TO BIBLIOGR;
GRANT DELETE, INSERT, SELECT, UPDATE ON ORDERS TO KOMPL;
GRANT DELETE, INSERT, SELECT, UPDATE ON ORDERS TO PERIOD;
GRANT INSERT, SELECT ON ORDERS TO STUD;
GRANT DELETE, INSERT, SELECT, UPDATE ON ORDERS TO STUDENT;
GRANT SELECT ON ORDER_CHAIN TO PUBLIC;
GRANT DELETE, INSERT, SELECT, UPDATE ON ORG_ORDER TO BIBLIOGR;
GRANT DELETE, INSERT, SELECT, UPDATE ON ORG_ORDER TO KOMPL;
GRANT SELECT ON ORG_ORDER TO PERIOD;
GRANT SELECT ON ORG_ORDER TO PUBLIC;
GRANT SELECT ON ORG_ORDER TO STUD;
GRANT SELECT ON ORG_ORDER TO STUDENT;
GRANT DELETE, INSERT, SELECT, UPDATE ON OUT_REASONS TO BIBLIOGR;
GRANT DELETE, INSERT, SELECT, UPDATE ON OUT_REASONS TO KOMPL;
GRANT DELETE, INSERT, SELECT, UPDATE ON OUT_REASONS TO PERIOD;
GRANT SELECT ON OUT_REASONS TO PUBLIC;
GRANT DELETE, INSERT, SELECT, UPDATE ON PARTY TO BIBLIOGR;
GRANT DELETE, INSERT, SELECT, UPDATE ON PARTY TO KOMPL;
GRANT DELETE, INSERT, SELECT, UPDATE ON PARTY TO PERIOD;
GRANT SELECT ON PARTY TO STUD;
GRANT SELECT ON PARTY TO STUDENT;
GRANT SELECT ON PARTY_COND TO PUBLIC;
GRANT SELECT ON PARTY_FIELDS TO PUBLIC;
GRANT DELETE, INSERT, SELECT, UPDATE ON PERSON_CARD TO BIBLIOGR;
GRANT DELETE, INSERT, SELECT, UPDATE ON PERSON_CARD TO KOMPL;
GRANT DELETE, INSERT, SELECT, UPDATE ON PERSON_CARD TO PERIOD;
GRANT SELECT ON PERSON_CARD TO STUD;
GRANT DELETE, INSERT, SELECT, UPDATE ON PERSON_CARD TO STUDENT;
GRANT DELETE, INSERT, SELECT, UPDATE ON PHYSICAL_PERSON TO BIBLIOGR;
GRANT DELETE, INSERT, SELECT, UPDATE ON PHYSICAL_PERSON TO KOMPL;
GRANT DELETE, INSERT, SELECT, UPDATE ON PHYSICAL_PERSON TO PERIOD;
GRANT SELECT ON PHYSICAL_PERSON TO PUBLIC;
GRANT SELECT ON PHYSICAL_PERSON TO STUD;
GRANT DELETE, INSERT, SELECT, UPDATE ON PHYSICAL_PERSON TO STUDENT;
GRANT SELECT ON PRIMARY_FIELD TO PUBLIC;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON PRINT_HEADER TO PUBLIC;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON PROFILELIST TO PUBLIC;
GRANT SELECT ON PUBLISHER_LIST TO PUBLIC;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON READER_CATEGORY TO PUBLIC;
GRANT DELETE, INSERT, SELECT, UPDATE ON READER_PHOTO TO BIBLIOGR;
GRANT DELETE, INSERT, SELECT, UPDATE ON READER_PHOTO TO KOMPL;
GRANT DELETE, INSERT, SELECT, UPDATE ON READER_PHOTO TO PERIOD;
GRANT SELECT ON READER_PHOTO TO STUD;
GRANT DELETE, INSERT, SELECT, UPDATE ON READER_PHOTO TO STUDENT;
GRANT DELETE, INSERT, SELECT, UPDATE ON READER_PHOTO2 TO PUBLIC;
GRANT DELETE, INSERT, SELECT, UPDATE ON READER_SRV_PLACE TO BIBLIOGR;
GRANT DELETE, INSERT, SELECT, UPDATE ON READER_SRV_PLACE TO KOMPL;
GRANT DELETE, INSERT, SELECT, UPDATE ON READER_SRV_PLACE TO PERIOD;
GRANT SELECT ON READER_SRV_PLACE TO PUBLIC;
GRANT DELETE, INSERT, SELECT, UPDATE ON READER_SRV_PLACE TO STUDENT;
GRANT INSERT, SELECT ON READER_VISIT TO PUBLIC;
GRANT INSERT ON REFUSE_STAT TO BIBLIOGR;
GRANT INSERT ON REFUSE_STAT TO KOMPL;
GRANT INSERT ON REFUSE_STAT TO PERIOD;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON REFUSE_STAT TO PUBLIC;
GRANT INSERT ON REFUSE_STAT TO STUDENT;
GRANT SELECT ON REFUSE_TYPES TO PUBLIC;
GRANT DELETE, INSERT, SELECT, UPDATE ON REF_CARD TO BIBLIOGR;
GRANT DELETE, INSERT, SELECT, UPDATE ON REF_CARD TO KOMPL;
GRANT DELETE, INSERT, SELECT, UPDATE ON REF_CARD TO PERIOD;
GRANT SELECT ON REF_CARD TO STUD;
GRANT INSERT, SELECT ON REF_CARD TO STUDENT;
GRANT DELETE, INSERT, SELECT, UPDATE ON REF_DOC TO BIBLIOGR;
GRANT DELETE, INSERT, SELECT, UPDATE ON REF_DOC TO KOMPL;
GRANT DELETE, INSERT, SELECT, UPDATE ON REF_DOC TO PERIOD;
GRANT SELECT ON REF_DOC TO STUD;
GRANT INSERT, SELECT ON REF_DOC TO STUDENT;
GRANT SELECT ON SERVICE_LIST TO PUBLIC;
GRANT SELECT ON SERVICE_PLACE TO PUBLIC;
GRANT DELETE, INSERT, SELECT, UPDATE ON SERVICE_TYPE TO BIBLIOGR;
GRANT DELETE, INSERT, SELECT, UPDATE ON SERVICE_TYPE TO KOMPL;
GRANT DELETE, INSERT, SELECT, UPDATE ON SERVICE_TYPE TO PERIOD;
GRANT SELECT ON SERVICE_TYPE TO PUBLIC;
GRANT SELECT ON SPECIALITY_LIST TO PUBLIC;
GRANT SELECT ON STOCK_LIST TO PUBLIC;
GRANT SELECT ON STORAGE_LIST TO PUBLIC;
GRANT DELETE, INSERT, SELECT, UPDATE ON SUBDIVISION_LIST TO BIBLIOGR;
GRANT DELETE, INSERT, SELECT, UPDATE ON SUBDIVISION_LIST TO KOMPL;
GRANT DELETE, INSERT, SELECT, UPDATE ON SUBDIVISION_LIST TO PERIOD;
GRANT SELECT ON SUBDIVISION_LIST TO PUBLIC;
GRANT SELECT ON TABLEPROFILE TO PUBLIC;
GRANT SELECT ON TEMPLATE_BODY TO PUBLIC;
GRANT SELECT ON TEMPLATE_DATASRC TO PUBLIC;
GRANT SELECT ON TEMPLATE_XML TO PUBLIC;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON TEMPOR TO PUBLIC;
GRANT DELETE, INSERT, SELECT, UPDATE ON TTP TO BIBLIOGR;
GRANT DELETE, INSERT, SELECT, UPDATE ON TTP TO KOMPL;
GRANT SELECT ON TTPHIER_FLDORDER TO PUBLIC;
GRANT SELECT ON TTPHIER_OPTIONS TO PUBLIC;
GRANT DELETE, INSERT, UPDATE ON TTP_FIELD TO BIBLIOGR;
GRANT DELETE, INSERT, UPDATE ON TTP_FIELD TO KOMPL;
GRANT SELECT ON TTP_FIELD TO PUBLIC;
GRANT DELETE, INSERT, UPDATE ON TTP_FIELD_ENUM TO BIBLIOGR;
GRANT DELETE, INSERT, UPDATE ON TTP_FIELD_ENUM TO KOMPL;
GRANT SELECT ON TTP_FIELD_ENUM TO PUBLIC;
GRANT DELETE, INSERT, SELECT, UPDATE ON TYPE_LIST TO BIBLIOGR;
GRANT DELETE, INSERT, SELECT, UPDATE ON TYPE_LIST TO KOMPL;
GRANT DELETE, INSERT, SELECT, UPDATE ON TYPE_LIST TO PERIOD;
GRANT SELECT ON TYPE_LIST TO PUBLIC;
GRANT DELETE, INSERT, SELECT, UPDATE ON TYPICAL_VALUES TO PUBLIC;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON USED_KOD TO PUBLIC;
GRANT SELECT ON USERGROUP TO PUBLIC;
GRANT SELECT ON USERLIST TO PUBLIC;
GRANT SELECT ON USERREP_AUTHORITY TO PUBLIC;
GRANT DELETE, INSERT, SELECT, UPDATE ON USER_REPORTS TO BIBLIOGR;
GRANT DELETE, INSERT, SELECT, UPDATE ON USER_REPORTS TO KOMPL;
GRANT SELECT ON USER_REPORTS TO PERIOD;
GRANT SELECT ON USER_REPORTS TO PUBLIC;
GRANT SELECT ON USER_REPORTS TO STUD;
GRANT SELECT ON USER_REPORTS TO STUDENT;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON WINPROFILES TO PUBLIC;
GRANT DELETE, INSERT, SELECT, UPDATE ON WORD_INDEX TO BIBLIOGR;
GRANT DELETE, INSERT, SELECT, UPDATE ON WORD_INDEX TO KOMPL;
GRANT DELETE, INSERT, SELECT, UPDATE ON WORD_INDEX TO PERIOD;
GRANT SELECT ON WORD_INDEX TO PUBLIC;*/
